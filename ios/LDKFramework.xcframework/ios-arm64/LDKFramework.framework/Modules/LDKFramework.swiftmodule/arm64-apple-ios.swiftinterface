// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LDKFramework
import Foundation
@_exported import LDKFramework
import Swift
public class C2Tuple_SignatureCVec_SignatureZZ {
  public init(pointer: LDKFramework.LDKC2Tuple_SignatureCVec_SignatureZZ)
  public func clone(orig: LDKFramework.C2Tuple_SignatureCVec_SignatureZZ) -> LDKFramework.C2Tuple_SignatureCVec_SignatureZZ
  public func new(a: [Swift.UInt8], b: [[Swift.UInt8]]) -> LDKFramework.C2Tuple_SignatureCVec_SignatureZZ
  @objc deinit
}
open class Watch {
  public var cOpaqueStruct: LDKFramework.LDKWatch?
  public init()
  public init(pointer: LDKFramework.LDKWatch)
  open func watch_channel(funding_txo: LDKFramework.OutPoint, monitor: LDKFramework.ChannelMonitor) -> LDKFramework.Result_NoneChannelMonitorUpdateErrZ
  open func update_channel(funding_txo: LDKFramework.OutPoint, update: LDKFramework.ChannelMonitorUpdate) -> LDKFramework.Result_NoneChannelMonitorUpdateErrZ
  open func release_pending_monitor_events() -> [LDKFramework.LDKMonitorEvent]
  open func free()
  @objc deinit
}
public class Result_ChannelConfigDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelConfigDecodeErrorZ)
  @objc deinit
}
public class Result_ChannelInfoDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelInfoDecodeErrorZ)
  @objc deinit
}
public class Result_UpdateFeeDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UpdateFeeDecodeErrorZ)
  @objc deinit
}
public class FundingSigned {
  public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKFundingSigned)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.FundingSigned) -> LDKFramework.FundingSigned
  public func write(obj: LDKFramework.FundingSigned) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_FundingSignedDecodeErrorZ
  @objc deinit
}
open class Listen {
  public var cOpaqueStruct: LDKFramework.LDKListen?
  public init()
  public init(pointer: LDKFramework.LDKListen)
  open func block_connected(block: [Swift.UInt8], height: Swift.UInt32)
  open func block_disconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
  open func free()
  @objc deinit
}
public class ErroringMessageHandler {
  public init()
  public init(pointer: LDKFramework.LDKErroringMessageHandler)
  public func as_MessageSendEventsProvider() -> LDKFramework.MessageSendEventsProvider
  public func as_ChannelMessageHandler() -> LDKFramework.ChannelMessageHandler
  @objc deinit
}
public class ChannelReestablish {
  public init(pointer: LDKFramework.LDKChannelReestablish)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_next_local_commitment_number() -> Swift.UInt64
  public func set_next_local_commitment_number(val: Swift.UInt64)
  public func get_next_remote_commitment_number() -> Swift.UInt64
  public func set_next_remote_commitment_number(val: Swift.UInt64)
  public func clone(orig: LDKFramework.ChannelReestablish) -> LDKFramework.ChannelReestablish
  public func write(obj: LDKFramework.ChannelReestablish) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelReestablishDecodeErrorZ
  @objc deinit
}
public class OutPoint {
  public init(txid_arg: [Swift.UInt8], index_arg: Swift.UInt16)
  public init(pointer: LDKFramework.LDKOutPoint)
  public func get_txid() -> [Swift.UInt8]
  public func set_txid(val: [Swift.UInt8])
  public func get_index() -> Swift.UInt16
  public func set_index(val: Swift.UInt16)
  public func clone(orig: LDKFramework.OutPoint) -> LDKFramework.OutPoint
  public func to_channel_id() -> [Swift.UInt8]
  public func write(obj: LDKFramework.OutPoint) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_OutPointDecodeErrorZ
  @objc deinit
}
public class Result_ShutdownDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ShutdownDecodeErrorZ)
  @objc deinit
}
public class Result_TransactionNoneZ {
  public init(pointer: LDKFramework.LDKCResult_TransactionNoneZ)
  @objc deinit
}
public class Result_ErrorMessageDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ErrorMessageDecodeErrorZ)
  @objc deinit
}
public class Result_SiPrefixNoneZ {
  public init(pointer: LDKFramework.LDKCResult_SiPrefixNoneZ)
  @objc deinit
}
open class Access {
  public var cOpaqueStruct: LDKFramework.LDKAccess?
  public init()
  public init(pointer: LDKFramework.LDKAccess)
  open func get_utxo(genesis_hash: [Swift.UInt8]?, short_channel_id: Swift.UInt64) -> LDKFramework.Result_TxOutAccessErrorZ
  open func free()
  @objc deinit
}
public class CounterpartyChannelTransactionParameters {
  public init(pubkeys_arg: LDKFramework.ChannelPublicKeys, selected_contest_delay_arg: Swift.UInt16)
  public init(pointer: LDKFramework.LDKCounterpartyChannelTransactionParameters)
  public func get_pubkeys() -> LDKFramework.ChannelPublicKeys
  public func set_pubkeys(val: LDKFramework.ChannelPublicKeys)
  public func get_selected_contest_delay() -> Swift.UInt16
  public func set_selected_contest_delay(val: Swift.UInt16)
  public func clone(orig: LDKFramework.CounterpartyChannelTransactionParameters) -> LDKFramework.CounterpartyChannelTransactionParameters
  public func write(obj: LDKFramework.CounterpartyChannelTransactionParameters) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
  @objc deinit
}
public class Result_PublicKeyErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PublicKeyErrorZ)
  @objc deinit
}
public class ExpiryTime {
  public init(pointer: LDKFramework.LDKExpiryTime)
  public func clone(orig: LDKFramework.ExpiryTime) -> LDKFramework.ExpiryTime
  public func from_seconds(seconds: Swift.UInt64) -> LDKFramework.Result_ExpiryTimeCreationErrorZ
  public func from_duration(duration: Swift.UInt64) -> LDKFramework.Result_ExpiryTimeCreationErrorZ
  public func as_seconds() -> Swift.UInt64
  public func as_duration() -> Swift.UInt64
  @objc deinit
}
public class Init {
  public init(features_arg: LDKFramework.InitFeatures)
  public init(pointer: LDKFramework.LDKInit)
  public func get_features() -> LDKFramework.InitFeatures
  public func set_features(val: LDKFramework.InitFeatures)
  public func clone(orig: LDKFramework.Init) -> LDKFramework.Init
  public func write(obj: LDKFramework.Init) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_InitDecodeErrorZ
  @objc deinit
}
public class MonitorUpdateError {
  public init(pointer: LDKFramework.LDKMonitorUpdateError)
  public func clone(orig: LDKFramework.MonitorUpdateError) -> LDKFramework.MonitorUpdateError
  @objc deinit
}
public class Result_TrustedCommitmentTransactionNoneZ {
  public init(pointer: LDKFramework.LDKCResult_TrustedCommitmentTransactionNoneZ)
  @objc deinit
}
public class FundingCreated {
  public init(temporary_channel_id_arg: [Swift.UInt8], funding_txid_arg: [Swift.UInt8], funding_output_index_arg: Swift.UInt16, signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKFundingCreated)
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_funding_txid() -> [Swift.UInt8]
  public func set_funding_txid(val: [Swift.UInt8])
  public func get_funding_output_index() -> Swift.UInt16
  public func set_funding_output_index(val: Swift.UInt16)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.FundingCreated) -> LDKFramework.FundingCreated
  public func write(obj: LDKFramework.FundingCreated) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_FundingCreatedDecodeErrorZ
  @objc deinit
}
public class ChannelMonitor {
  public init(pointer: LDKFramework.LDKChannelMonitor)
  public func clone(orig: LDKFramework.ChannelMonitor) -> LDKFramework.ChannelMonitor
  public func write(obj: LDKFramework.ChannelMonitor) -> [Swift.UInt8]
  public func update_monitor(updates: LDKFramework.ChannelMonitorUpdate, broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger) -> LDKFramework.Result_NoneMonitorUpdateErrorZ
  public func get_latest_update_id() -> Swift.UInt64
  public func get_funding_txo() -> LDKFramework.C2Tuple_OutPointScriptZ
  public func get_outputs_to_watch() -> [LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public func load_outputs_to_watch(filter: LDKFramework.Filter)
  public func get_and_clear_pending_monitor_events() -> [LDKFramework.LDKMonitorEvent]
  public func get_and_clear_pending_events() -> [LDKFramework.LDKEvent]
  public func get_latest_holder_commitment_txn(logger: LDKFramework.Logger) -> [[Swift.UInt8]]
  public func block_connected(header: [Swift.UInt8], txdata: [LDKFramework.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger) -> [LDKFramework.LDKTransactionOutputs]
  public func block_disconnected(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger)
  public func transactions_confirmed(header: [Swift.UInt8], txdata: [LDKFramework.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger) -> [LDKFramework.LDKTransactionOutputs]
  public func transaction_unconfirmed(txid: [Swift.UInt8], broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger)
  public func best_block_updated(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LDKFramework.BroadcasterInterface, fee_estimator: LDKFramework.FeeEstimator, logger: LDKFramework.Logger) -> [LDKFramework.LDKTransactionOutputs]
  public func get_relevant_txids() -> [LDKFramework.LDKTxid]
  @objc deinit
}
public class C2Tuple_OutPointScriptZ {
  public init(pointer: LDKFramework.LDKC2Tuple_OutPointScriptZ)
  public func clone(orig: LDKFramework.C2Tuple_OutPointScriptZ) -> LDKFramework.C2Tuple_OutPointScriptZ
  public func new(a: LDKFramework.OutPoint, b: [Swift.UInt8]) -> LDKFramework.C2Tuple_OutPointScriptZ
  @objc deinit
}
public class C2Tuple_BlockHashChannelManagerZ {
  public init(pointer: LDKFramework.LDKC2Tuple_BlockHashChannelManagerZ)
  public func new(a: [Swift.UInt8], b: LDKFramework.ChannelManager) -> LDKFramework.C2Tuple_BlockHashChannelManagerZ
  @objc deinit
}
public class C2Tuple_PaymentHashPaymentSecretZ {
  public init(pointer: LDKFramework.LDKC2Tuple_PaymentHashPaymentSecretZ)
  public func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LDKFramework.C2Tuple_PaymentHashPaymentSecretZ
  @objc deinit
}
public class AnnouncementSignatures {
  public init(channel_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, node_signature_arg: [Swift.UInt8], bitcoin_signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKAnnouncementSignatures)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_node_signature() -> [Swift.UInt8]
  public func set_node_signature(val: [Swift.UInt8])
  public func get_bitcoin_signature() -> [Swift.UInt8]
  public func set_bitcoin_signature(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.AnnouncementSignatures) -> LDKFramework.AnnouncementSignatures
  public func write(obj: LDKFramework.AnnouncementSignatures) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_AnnouncementSignaturesDecodeErrorZ
  @objc deinit
}
public class ChannelManagerConstructor {
  final public let channelManager: LDKFramework.ChannelManager
  final public let channel_manager_latest_block_hash: [Swift.UInt8]?
  public var channel_monitors: [(LDKFramework.ChannelMonitor, [Swift.UInt8])] {
    get
  }
  public init(channel_manager_serialized: [Swift.UInt8], channel_monitors_serialized: [[Swift.UInt8]], keys_interface: LDKFramework.KeysInterface, fee_estimator: LDKFramework.FeeEstimator, chain_monitor: LDKFramework.ChainMonitor, filter: LDKFramework.Filter?, tx_broadcaster: LDKFramework.BroadcasterInterface, logger: LDKFramework.Logger) throws
  public init(network: LDKFramework.LDKNetwork, config: LDKFramework.UserConfig, current_blockchain_tip_hash: [Swift.UInt8], current_blockchain_tip_height: Swift.UInt32, keys_interface: LDKFramework.KeysInterface, fee_estimator: LDKFramework.FeeEstimator, chain_monitor: LDKFramework.ChainMonitor, tx_broadcaster: LDKFramework.BroadcasterInterface, logger: LDKFramework.Logger)
  @objc deinit
}
open class Logger {
  public var cOpaqueStruct: LDKFramework.LDKLogger?
  public init()
  public init(pointer: LDKFramework.LDKLogger)
  open func log(record: Swift.String?)
  open func free()
  @objc deinit
}
public class SignedRawInvoice {
  public init(pointer: LDKFramework.LDKSignedRawInvoice)
  public func clone(orig: LDKFramework.SignedRawInvoice) -> LDKFramework.SignedRawInvoice
  public func into_parts() -> LDKFramework.C3Tuple_RawInvoice_u832InvoiceSignatureZ
  public func raw_invoice() -> LDKFramework.RawInvoice
  public func hash() -> [Swift.UInt8]
  public func signature() -> LDKFramework.InvoiceSignature
  public func recover_payee_pub_key() -> LDKFramework.Result_PayeePubKeyErrorZ
  public func check_signature() -> Swift.Bool
  public func from_str(s: Swift.String) -> LDKFramework.Result_SignedRawInvoiceNoneZ
  public func to_str(o: LDKFramework.SignedRawInvoice) -> Swift.String
  @objc deinit
}
public class Result_NoneChannelMonitorUpdateErrZ {
  public init(pointer: LDKFramework.LDKCResult_NoneChannelMonitorUpdateErrZ)
  @objc deinit
}
public class ChannelManagerReadArgs {
  public init(keys_manager: LDKFramework.KeysInterface, fee_estimator: LDKFramework.FeeEstimator, chain_monitor: LDKFramework.Watch, tx_broadcaster: LDKFramework.BroadcasterInterface, logger: LDKFramework.Logger, default_config: LDKFramework.UserConfig, channel_monitors: [LDKFramework.LDKChannelMonitor])
  public init(pointer: LDKFramework.LDKChannelManagerReadArgs)
  public func get_keys_manager() -> LDKFramework.KeysInterface
  public func set_keys_manager(val: LDKFramework.KeysInterface)
  public func get_fee_estimator() -> LDKFramework.FeeEstimator
  public func set_fee_estimator(val: LDKFramework.FeeEstimator)
  public func get_chain_monitor() -> LDKFramework.Watch
  public func set_chain_monitor(val: LDKFramework.Watch)
  public func get_tx_broadcaster() -> LDKFramework.BroadcasterInterface
  public func set_tx_broadcaster(val: LDKFramework.BroadcasterInterface)
  public func get_logger() -> LDKFramework.Logger
  public func set_logger(val: LDKFramework.Logger)
  public func get_default_config() -> LDKFramework.UserConfig
  public func set_default_config(val: LDKFramework.UserConfig)
  @objc deinit
}
public class Result_InvoiceNoneZ {
  public init(pointer: LDKFramework.LDKCResult_InvoiceNoneZ)
  @objc deinit
}
public class ChannelPublicKeys {
  public init(funding_pubkey_arg: [Swift.UInt8], revocation_basepoint_arg: [Swift.UInt8], payment_point_arg: [Swift.UInt8], delayed_payment_basepoint_arg: [Swift.UInt8], htlc_basepoint_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKChannelPublicKeys)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.ChannelPublicKeys) -> LDKFramework.ChannelPublicKeys
  public func write(obj: LDKFramework.ChannelPublicKeys) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelPublicKeysDecodeErrorZ
  @objc deinit
}
public class Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ)
  @objc deinit
}
public class Shutdown {
  public init(channel_id_arg: [Swift.UInt8], scriptpubkey_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKShutdown)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_scriptpubkey() -> [Swift.UInt8]
  public func set_scriptpubkey(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.Shutdown) -> LDKFramework.Shutdown
  public func write(obj: LDKFramework.Shutdown) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ShutdownDecodeErrorZ
  @objc deinit
}
public class HTLCOutputInCommitment {
  public init(offered_arg: Swift.Bool, amount_msat_arg: Swift.UInt64, cltv_expiry_arg: Swift.UInt32, payment_hash_arg: [Swift.UInt8], transaction_output_index_arg: LDKFramework.Option_u32Z)
  public init(pointer: LDKFramework.LDKHTLCOutputInCommitment)
  public func get_offered() -> Swift.Bool
  public func set_offered(val: Swift.Bool)
  public func get_amount_msat() -> Swift.UInt64
  public func set_amount_msat(val: Swift.UInt64)
  public func get_cltv_expiry() -> Swift.UInt32
  public func set_cltv_expiry(val: Swift.UInt32)
  public func get_payment_hash() -> [Swift.UInt8]
  public func set_payment_hash(val: [Swift.UInt8])
  public func get_transaction_output_index() -> LDKFramework.Option_u32Z
  public func set_transaction_output_index(val: LDKFramework.Option_u32Z)
  public func clone(orig: LDKFramework.HTLCOutputInCommitment) -> LDKFramework.HTLCOutputInCommitment
  public func write(obj: LDKFramework.HTLCOutputInCommitment) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_HTLCOutputInCommitmentDecodeErrorZ
  @objc deinit
}
public class Result_BuiltCommitmentTransactionDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_BuiltCommitmentTransactionDecodeErrorZ)
  @objc deinit
}
public class Result_NodeInfoDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NodeInfoDecodeErrorZ)
  @objc deinit
}
public class Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ)
  @objc deinit
}
public class Result_boolLightningErrorZ {
  public init(pointer: LDKFramework.LDKCResult_boolLightningErrorZ)
  @objc deinit
}
public class C2Tuple_usizeTransactionZ {
  public init(pointer: LDKFramework.LDKC2Tuple_usizeTransactionZ)
  public func new(a: Swift.UInt, b: [Swift.UInt8]) -> LDKFramework.C2Tuple_usizeTransactionZ
  @objc deinit
}
public class C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ {
  public init(pointer: LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ)
  public func new(a: [Swift.UInt8], b: [LDKFramework.LDKC2Tuple_u32ScriptZ]) -> LDKFramework.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
  @objc deinit
}
public class Result_UnsignedChannelAnnouncementDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ)
  @objc deinit
}
public class ChannelFeatures {
  public init()
  public init(pointer: LDKFramework.LDKChannelFeatures)
  public func clone(orig: LDKFramework.ChannelFeatures) -> LDKFramework.ChannelFeatures
  public func write(obj: LDKFramework.ChannelFeatures) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelFeaturesDecodeErrorZ
  @objc deinit
}
public class C2Tuple_u32TxOutZ {
  public init(pointer: LDKFramework.LDKC2Tuple_u32TxOutZ)
  public func clone(orig: LDKFramework.C2Tuple_u32TxOutZ) -> LDKFramework.C2Tuple_u32TxOutZ
  public func new(a: Swift.UInt32, b: LDKFramework.LDKTxOut) -> LDKFramework.C2Tuple_u32TxOutZ
  @objc deinit
}
public class Result_CommitmentSignedDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CommitmentSignedDecodeErrorZ)
  @objc deinit
}
public class Result_HolderCommitmentTransactionDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_HolderCommitmentTransactionDecodeErrorZ)
  @objc deinit
}
public class Result_PaymentSecretAPIErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PaymentSecretAPIErrorZ)
  @objc deinit
}
public class Result_InvoiceSignOrCreationErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InvoiceSignOrCreationErrorZ)
  @objc deinit
}
public class PeerManager {
  public init(message_handler: LDKFramework.MessageHandler, our_node_secret: [Swift.UInt8], ephemeral_random_data: [Swift.UInt8], logger: LDKFramework.Logger)
  public init(pointer: LDKFramework.LDKPeerManager)
  public func get_peer_node_ids() -> [[Swift.UInt8]]
  public func new_outbound_connection(their_node_id: [Swift.UInt8], descriptor: LDKFramework.SocketDescriptor) -> LDKFramework.Result_CVec_u8ZPeerHandleErrorZ
  public func new_inbound_connection(descriptor: LDKFramework.SocketDescriptor) -> LDKFramework.Result_NonePeerHandleErrorZ
  public func write_buffer_space_avail(descriptor: LDKFramework.SocketDescriptor) -> LDKFramework.Result_NonePeerHandleErrorZ
  public func read_event(peer_descriptor: LDKFramework.SocketDescriptor, data: [Swift.UInt8]) -> LDKFramework.Result_boolPeerHandleErrorZ
  public func process_events()
  public func socket_disconnected(descriptor: LDKFramework.SocketDescriptor)
  public func disconnect_by_node_id(node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  public func timer_tick_occurred()
  @objc deinit
}
public class LockedNetworkGraph {
  public init(pointer: LDKFramework.LDKLockedNetworkGraph)
  public func graph() -> LDKFramework.NetworkGraph
  @objc deinit
}
public class ChannelConfig {
  public init()
  public init(pointer: LDKFramework.LDKChannelConfig)
  public func get_fee_proportional_millionths() -> Swift.UInt32
  public func set_fee_proportional_millionths(val: Swift.UInt32)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_announced_channel() -> Swift.Bool
  public func set_announced_channel(val: Swift.Bool)
  public func get_commit_upfront_shutdown_pubkey() -> Swift.Bool
  public func set_commit_upfront_shutdown_pubkey(val: Swift.Bool)
  public func clone(orig: LDKFramework.ChannelConfig) -> LDKFramework.ChannelConfig
  public func write(obj: LDKFramework.ChannelConfig) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelConfigDecodeErrorZ
  @objc deinit
}
public class Result_boolPeerHandleErrorZ {
  public init(pointer: LDKFramework.LDKCResult_boolPeerHandleErrorZ)
  @objc deinit
}
public class Result_CResult_NetAddressu8ZDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CResult_NetAddressu8ZDecodeErrorZ)
  @objc deinit
}
public class StaticPaymentOutputDescriptor {
  public init(outpoint_arg: LDKFramework.OutPoint, output_arg: LDKFramework.LDKTxOut, channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
  public init(pointer: LDKFramework.LDKStaticPaymentOutputDescriptor)
  public func get_outpoint() -> LDKFramework.OutPoint
  public func set_outpoint(val: LDKFramework.OutPoint)
  public func set_output(val: LDKFramework.LDKTxOut)
  public func get_channel_keys_id() -> [Swift.UInt8]
  public func set_channel_keys_id(val: [Swift.UInt8])
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func clone(orig: LDKFramework.StaticPaymentOutputDescriptor) -> LDKFramework.StaticPaymentOutputDescriptor
  @objc deinit
}
open class SocketDescriptor {
  public var cOpaqueStruct: LDKFramework.LDKSocketDescriptor?
  public init()
  public init(pointer: LDKFramework.LDKSocketDescriptor)
  open func send_data(data: [Swift.UInt8], resume_read: Swift.Bool) -> Swift.UInt
  open func disconnect_socket()
  open func eq(other_arg: LDKFramework.SocketDescriptor) -> Swift.Bool
  open func hash() -> Swift.UInt64
  open func clone() -> Swift.UnsafeMutableRawPointer
  open func free()
  @objc deinit
}
public class OpenChannel {
  public init(pointer: LDKFramework.LDKOpenChannel)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_funding_satoshis() -> Swift.UInt64
  public func set_funding_satoshis(val: Swift.UInt64)
  public func get_push_msat() -> Swift.UInt64
  public func set_push_msat(val: Swift.UInt64)
  public func get_dust_limit_satoshis() -> Swift.UInt64
  public func set_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_channel_reserve_satoshis() -> Swift.UInt64
  public func set_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_feerate_per_kw() -> Swift.UInt32
  public func set_feerate_per_kw(val: Swift.UInt32)
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func get_max_accepted_htlcs() -> Swift.UInt16
  public func set_max_accepted_htlcs(val: Swift.UInt16)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func get_first_per_commitment_point() -> [Swift.UInt8]
  public func set_first_per_commitment_point(val: [Swift.UInt8])
  public func get_channel_flags() -> Swift.UInt8
  public func set_channel_flags(val: Swift.UInt8)
  public func clone(orig: LDKFramework.OpenChannel) -> LDKFramework.OpenChannel
  public func write(obj: LDKFramework.OpenChannel) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_OpenChannelDecodeErrorZ
  @objc deinit
}
public class Result_CVec_u8ZPeerHandleErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CVec_u8ZPeerHandleErrorZ)
  @objc deinit
}
public class Result_PayeePubKeyErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PayeePubKeyErrorZ)
  @objc deinit
}
public class ErrorMessage {
  public init(channel_id_arg: [Swift.UInt8], data_arg: Swift.String)
  public init(pointer: LDKFramework.LDKErrorMessage)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_data() -> Swift.String
  public func set_data(val: Swift.String)
  public func clone(orig: LDKFramework.ErrorMessage) -> LDKFramework.ErrorMessage
  public func write(obj: LDKFramework.ErrorMessage) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ErrorMessageDecodeErrorZ
  @objc deinit
}
public class Result_ExpiryTimeCreationErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ExpiryTimeCreationErrorZ)
  @objc deinit
}
public class Result_ChannelReestablishDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelReestablishDecodeErrorZ)
  @objc deinit
}
public class HTLCUpdate {
  public init(pointer: LDKFramework.LDKHTLCUpdate)
  public func clone(orig: LDKFramework.HTLCUpdate) -> LDKFramework.HTLCUpdate
  public func write(obj: LDKFramework.HTLCUpdate) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_HTLCUpdateDecodeErrorZ
  @objc deinit
}
public class UnsignedChannelUpdate {
  public init(pointer: LDKFramework.LDKUnsignedChannelUpdate)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_timestamp() -> Swift.UInt32
  public func set_timestamp(val: Swift.UInt32)
  public func get_flags() -> Swift.UInt8
  public func set_flags(val: Swift.UInt8)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_fee_base_msat() -> Swift.UInt32
  public func set_fee_base_msat(val: Swift.UInt32)
  public func get_fee_proportional_millionths() -> Swift.UInt32
  public func set_fee_proportional_millionths(val: Swift.UInt32)
  public func clone(orig: LDKFramework.UnsignedChannelUpdate) -> LDKFramework.UnsignedChannelUpdate
  public func write(obj: LDKFramework.UnsignedChannelUpdate) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UnsignedChannelUpdateDecodeErrorZ
  @objc deinit
}
public class Result_NodeAnnouncementInfoDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NodeAnnouncementInfoDecodeErrorZ)
  @objc deinit
}
public class NetAddress {
  public init(pointer: LDKFramework.LDKNetAddress)
  @objc deinit
}
public class CommitmentUpdate {
  public init(update_add_htlcs_arg: [LDKFramework.LDKUpdateAddHTLC], update_fulfill_htlcs_arg: [LDKFramework.LDKUpdateFulfillHTLC], update_fail_htlcs_arg: [LDKFramework.LDKUpdateFailHTLC], update_fail_malformed_htlcs_arg: [LDKFramework.LDKUpdateFailMalformedHTLC], update_fee_arg: LDKFramework.UpdateFee, commitment_signed_arg: LDKFramework.CommitmentSigned)
  public init(pointer: LDKFramework.LDKCommitmentUpdate)
  public func set_update_add_htlcs(val: [LDKFramework.LDKUpdateAddHTLC])
  public func set_update_fulfill_htlcs(val: [LDKFramework.LDKUpdateFulfillHTLC])
  public func set_update_fail_htlcs(val: [LDKFramework.LDKUpdateFailHTLC])
  public func set_update_fail_malformed_htlcs(val: [LDKFramework.LDKUpdateFailMalformedHTLC])
  public func get_update_fee() -> LDKFramework.UpdateFee
  public func set_update_fee(val: LDKFramework.UpdateFee)
  public func get_commitment_signed() -> LDKFramework.CommitmentSigned
  public func set_commitment_signed(val: LDKFramework.CommitmentSigned)
  public func clone(orig: LDKFramework.CommitmentUpdate) -> LDKFramework.CommitmentUpdate
  @objc deinit
}
open class Persist {
  public var cOpaqueStruct: LDKFramework.LDKPersist?
  public init()
  public init(pointer: LDKFramework.LDKPersist)
  open func persist_new_channel(id: LDKFramework.OutPoint, data: LDKFramework.ChannelMonitor) -> LDKFramework.Result_NoneChannelMonitorUpdateErrZ
  open func update_persisted_channel(id: LDKFramework.OutPoint, update: LDKFramework.ChannelMonitorUpdate, data: LDKFramework.ChannelMonitor) -> LDKFramework.Result_NoneChannelMonitorUpdateErrZ
  open func free()
  @objc deinit
}
public class Result_NoneAPIErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NoneAPIErrorZ)
  @objc deinit
}
public class Result_CVec_CVec_u8ZZNoneZ {
  public init(pointer: LDKFramework.LDKCResult_CVec_CVec_u8ZZNoneZ)
  @objc deinit
}
public class Pong {
  public init(byteslen_arg: Swift.UInt16)
  public init(pointer: LDKFramework.LDKPong)
  public func get_byteslen() -> Swift.UInt16
  public func set_byteslen(val: Swift.UInt16)
  public func clone(orig: LDKFramework.Pong) -> LDKFramework.Pong
  public func write(obj: LDKFramework.Pong) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_PongDecodeErrorZ
  @objc deinit
}
public class SignOrCreationError {
  public init(pointer: LDKFramework.LDKSignOrCreationError)
  @objc deinit
}
public class Result_FundingLockedDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_FundingLockedDecodeErrorZ)
  @objc deinit
}
public class Result_CounterpartyChannelTransactionParametersDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ)
  @objc deinit
}
public class C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ {
  public init(pointer: LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ)
  public func new(a: [Swift.UInt8], b: [LDKFramework.LDKC2Tuple_u32TxOutZ]) -> LDKFramework.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
  @objc deinit
}
public class Result_ChannelUpdateDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelUpdateDecodeErrorZ)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LDKExampleClass {
  public class func printSomething()
  public func printInstance()
  @objc deinit
}
public class Result_InMemorySignerDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InMemorySignerDecodeErrorZ)
  @objc deinit
}
open class RoutingMessageHandler {
  public var cOpaqueStruct: LDKFramework.LDKRoutingMessageHandler?
  public init()
  public init(pointer: LDKFramework.LDKRoutingMessageHandler)
  open func handle_node_announcement(msg: LDKFramework.NodeAnnouncement) -> LDKFramework.Result_boolLightningErrorZ
  open func handle_channel_announcement(msg: LDKFramework.ChannelAnnouncement) -> LDKFramework.Result_boolLightningErrorZ
  open func handle_channel_update(msg: LDKFramework.ChannelUpdate) -> LDKFramework.Result_boolLightningErrorZ
  open func handle_htlc_fail_channel_update(update: LDKFramework.HTLCFailChannelUpdate)
  open func get_next_channel_announcements(starting_point: Swift.UInt64, batch_amount: Swift.UInt8) -> [LDKFramework.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  open func get_next_node_announcements(starting_point: [Swift.UInt8], batch_amount: Swift.UInt8) -> [LDKFramework.LDKNodeAnnouncement]
  open func sync_routing_table(their_node_id: [Swift.UInt8], initValue: LDKFramework.Init)
  open func handle_reply_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework.ReplyChannelRange) -> LDKFramework.Result_NoneLightningErrorZ
  open func handle_reply_short_channel_ids_end(their_node_id: [Swift.UInt8], msg: LDKFramework.ReplyShortChannelIdsEnd) -> LDKFramework.Result_NoneLightningErrorZ
  open func handle_query_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework.QueryChannelRange) -> LDKFramework.Result_NoneLightningErrorZ
  open func handle_query_short_channel_ids(their_node_id: [Swift.UInt8], msg: LDKFramework.QueryShortChannelIds) -> LDKFramework.Result_NoneLightningErrorZ
  open func free()
  @objc deinit
}
public class Result_UpdateFulfillHTLCDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UpdateFulfillHTLCDecodeErrorZ)
  @objc deinit
}
public class Result_PingDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PingDecodeErrorZ)
  @objc deinit
}
public class BuiltCommitmentTransaction {
  public init(transaction_arg: [Swift.UInt8], txid_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKBuiltCommitmentTransaction)
  public func get_transaction() -> [Swift.UInt8]
  public func set_transaction(val: [Swift.UInt8])
  public func get_txid() -> [Swift.UInt8]
  public func set_txid(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.BuiltCommitmentTransaction) -> LDKFramework.BuiltCommitmentTransaction
  public func write(obj: LDKFramework.BuiltCommitmentTransaction) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_BuiltCommitmentTransactionDecodeErrorZ
  public func get_sighash_all(funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  public func sign(funding_key: [Swift.UInt8], funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  @objc deinit
}
public class Result_HTLCUpdateDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_HTLCUpdateDecodeErrorZ)
  @objc deinit
}
public class CommitmentTransaction {
  public init(pointer: LDKFramework.LDKCommitmentTransaction)
  public func clone(orig: LDKFramework.CommitmentTransaction) -> LDKFramework.CommitmentTransaction
  public func write(obj: LDKFramework.CommitmentTransaction) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_CommitmentTransactionDecodeErrorZ
  public func commitment_number() -> Swift.UInt64
  public func to_broadcaster_value_sat() -> Swift.UInt64
  public func to_countersignatory_value_sat() -> Swift.UInt64
  public func feerate_per_kw() -> Swift.UInt32
  public func trust() -> LDKFramework.TrustedCommitmentTransaction
  public func verify(channel_parameters: LDKFramework.DirectedChannelTransactionParameters, broadcaster_keys: LDKFramework.ChannelPublicKeys, countersignatory_keys: LDKFramework.ChannelPublicKeys) -> LDKFramework.Result_TrustedCommitmentTransactionNoneZ
  @objc deinit
}
public class InvoiceFeatures {
  public init()
  public init(pointer: LDKFramework.LDKInvoiceFeatures)
  public func clone(orig: LDKFramework.InvoiceFeatures) -> LDKFramework.InvoiceFeatures
  public func write(obj: LDKFramework.InvoiceFeatures) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_InvoiceFeaturesDecodeErrorZ
  @objc deinit
}
public class ChannelUpdate {
  public init(signature_arg: [Swift.UInt8], contents_arg: LDKFramework.UnsignedChannelUpdate)
  public init(pointer: LDKFramework.LDKChannelUpdate)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework.UnsignedChannelUpdate
  public func set_contents(val: LDKFramework.UnsignedChannelUpdate)
  public func clone(orig: LDKFramework.ChannelUpdate) -> LDKFramework.ChannelUpdate
  public func write(obj: LDKFramework.ChannelUpdate) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelUpdateDecodeErrorZ
  @objc deinit
}
public class Result_NetAddressu8Z {
  public init(pointer: LDKFramework.LDKCResult_NetAddressu8Z)
  @objc deinit
}
public class Result_TxCreationKeysErrorZ {
  public init(pointer: LDKFramework.LDKCResult_TxCreationKeysErrorZ)
  @objc deinit
}
public class Result_SignatureNoneZ {
  public init(pointer: LDKFramework.LDKCResult_SignatureNoneZ)
  @objc deinit
}
public class RouteHint {
  public init(pointer: LDKFramework.LDKRouteHint)
  public func clone(orig: LDKFramework.RouteHint) -> LDKFramework.RouteHint
  public func new(hops: [LDKFramework.LDKRouteHintHop]) -> LDKFramework.Result_RouteHintCreationErrorZ
  public func into_inner() -> [LDKFramework.LDKRouteHintHop]
  @objc deinit
}
public class Result_RouteHintCreationErrorZ {
  public init(pointer: LDKFramework.LDKCResult_RouteHintCreationErrorZ)
  @objc deinit
}
public class ChannelMonitorUpdate {
  public init(pointer: LDKFramework.LDKChannelMonitorUpdate)
  public func get_update_id() -> Swift.UInt64
  public func set_update_id(val: Swift.UInt64)
  public func clone(orig: LDKFramework.ChannelMonitorUpdate) -> LDKFramework.ChannelMonitorUpdate
  public func write(obj: LDKFramework.ChannelMonitorUpdate) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelMonitorUpdateDecodeErrorZ
  @objc deinit
}
public class Result_C2Tuple_SignatureCVec_SignatureZZNoneZ {
  public init(pointer: LDKFramework.LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ)
  @objc deinit
}
public class HTLCFailChannelUpdate {
  public init(pointer: LDKFramework.LDKHTLCFailChannelUpdate)
  @objc deinit
}
public class GossipTimestampFilter {
  public init(chain_hash_arg: [Swift.UInt8], first_timestamp_arg: Swift.UInt32, timestamp_range_arg: Swift.UInt32)
  public init(pointer: LDKFramework.LDKGossipTimestampFilter)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_timestamp() -> Swift.UInt32
  public func set_first_timestamp(val: Swift.UInt32)
  public func get_timestamp_range() -> Swift.UInt32
  public func set_timestamp_range(val: Swift.UInt32)
  public func clone(orig: LDKFramework.GossipTimestampFilter) -> LDKFramework.GossipTimestampFilter
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_GossipTimestampFilterDecodeErrorZ
  public func write(obj: LDKFramework.GossipTimestampFilter) -> [Swift.UInt8]
  @objc deinit
}
public class Result_ClosingSignedDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ClosingSignedDecodeErrorZ)
  @objc deinit
}
public class Fallback {
  public init(pointer: LDKFramework.LDKFallback)
  @objc deinit
}
public class ClosingSigned {
  public init(channel_id_arg: [Swift.UInt8], fee_satoshis_arg: Swift.UInt64, signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKClosingSigned)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_fee_satoshis() -> Swift.UInt64
  public func set_fee_satoshis(val: Swift.UInt64)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.ClosingSigned) -> LDKFramework.ClosingSigned
  public func write(obj: LDKFramework.ClosingSigned) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ClosingSignedDecodeErrorZ
  @objc deinit
}
public class Result_UpdateAddHTLCDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UpdateAddHTLCDecodeErrorZ)
  @objc deinit
}
public typealias LDKTransactionOutputs = LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
public typealias LDKTxid = LDKFramework.LDKThirtyTwoBytes
@_hasMissingDesignatedInitializers public class Bindings {
  public class func new_LDKFourBytes(array: [Swift.UInt8]) -> LDKFramework.LDKFourBytes
  public class func LDKFourBytes_to_array(nativeType: LDKFramework.LDKFourBytes) -> [Swift.UInt8]
  public class func new_LDKThreeBytes(array: [Swift.UInt8]) -> LDKFramework.LDKThreeBytes
  public class func LDKThreeBytes_to_array(nativeType: LDKFramework.LDKThreeBytes) -> [Swift.UInt8]
  public class func new_LDKTenBytes(array: [Swift.UInt8]) -> LDKFramework.LDKTenBytes
  public class func LDKTenBytes_to_array(nativeType: LDKFramework.LDKTenBytes) -> [Swift.UInt8]
  public class func new_LDKPublicKey(array: [Swift.UInt8]) -> LDKFramework.LDKPublicKey
  public class func LDKPublicKey_to_array(nativeType: LDKFramework.LDKPublicKey) -> [Swift.UInt8]
  public class func new_LDKThirtyTwoBytes(array: [Swift.UInt8]) -> LDKFramework.LDKThirtyTwoBytes
  public class func LDKThirtyTwoBytes_to_array(nativeType: LDKFramework.LDKThirtyTwoBytes) -> [Swift.UInt8]
  public class func new_LDKRecoverableSignature(array: [Swift.UInt8]) -> LDKFramework.LDKRecoverableSignature
  public class func LDKRecoverableSignature_to_array(nativeType: LDKFramework.LDKRecoverableSignature) -> [Swift.UInt8]
  public class func new_LDKSixteenBytes(array: [Swift.UInt8]) -> LDKFramework.LDKSixteenBytes
  public class func LDKSixteenBytes_to_array(nativeType: LDKFramework.LDKSixteenBytes) -> [Swift.UInt8]
  public class func new_LDKTwentyBytes(array: [Swift.UInt8]) -> LDKFramework.LDKTwentyBytes
  public class func LDKTwentyBytes_to_array(nativeType: LDKFramework.LDKTwentyBytes) -> [Swift.UInt8]
  public class func new_LDKSignature(array: [Swift.UInt8]) -> LDKFramework.LDKSignature
  public class func LDKSignature_to_array(nativeType: LDKFramework.LDKSignature) -> [Swift.UInt8]
  public class func new_LDKSecretKey(array: [Swift.UInt8]) -> LDKFramework.LDKSecretKey
  public class func LDKSecretKey_to_array(nativeType: LDKFramework.LDKSecretKey) -> [Swift.UInt8]
  public class func array_to_tuple80(array: [Swift.UInt8]) -> (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)
  public class func tuple80_to_array(nativeType: (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)) -> [Swift.UInt8]
  public class func new_LDKCVec_SpendableOutputDescriptorZ(array: [LDKFramework.LDKSpendableOutputDescriptor]) -> LDKFramework.LDKCVec_SpendableOutputDescriptorZ
  public class func LDKCVec_SpendableOutputDescriptorZ_to_array(nativeType: LDKFramework.LDKCVec_SpendableOutputDescriptorZ) -> [LDKFramework.LDKSpendableOutputDescriptor]
  public class func new_LDKCVec_MonitorEventZ(array: [LDKFramework.LDKMonitorEvent]) -> LDKFramework.LDKCVec_MonitorEventZ
  public class func LDKCVec_MonitorEventZ_to_array(nativeType: LDKFramework.LDKCVec_MonitorEventZ) -> [LDKFramework.LDKMonitorEvent]
  public class func new_LDKCVec_RouteHopZ(array: [LDKFramework.LDKRouteHop]) -> LDKFramework.LDKCVec_RouteHopZ
  public class func LDKCVec_RouteHopZ_to_array(nativeType: LDKFramework.LDKCVec_RouteHopZ) -> [LDKFramework.LDKRouteHop]
  public class func new_LDKCVec_C2Tuple_usizeTransactionZZ(array: [LDKFramework.LDKC2Tuple_usizeTransactionZ]) -> LDKFramework.LDKCVec_C2Tuple_usizeTransactionZZ
  public class func LDKCVec_C2Tuple_usizeTransactionZZ_to_array(nativeType: LDKFramework.LDKCVec_C2Tuple_usizeTransactionZZ) -> [LDKFramework.LDKC2Tuple_usizeTransactionZ]
  public class func new_LDKCVec_TxOutZ(array: [LDKFramework.LDKTxOut]) -> LDKFramework.LDKCVec_TxOutZ
  public class func LDKCVec_TxOutZ_to_array(nativeType: LDKFramework.LDKCVec_TxOutZ) -> [LDKFramework.LDKTxOut]
  public class func new_LDKCVec_C2Tuple_BlockHashChannelMonitorZZ(array: [LDKFramework.LDKC2Tuple_BlockHashChannelMonitorZ]) -> LDKFramework.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ
  public class func LDKCVec_C2Tuple_BlockHashChannelMonitorZZ_to_array(nativeType: LDKFramework.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ) -> [LDKFramework.LDKC2Tuple_BlockHashChannelMonitorZ]
  public class func new_LDKCVec_UpdateFulfillHTLCZ(array: [LDKFramework.LDKUpdateFulfillHTLC]) -> LDKFramework.LDKCVec_UpdateFulfillHTLCZ
  public class func LDKCVec_UpdateFulfillHTLCZ_to_array(nativeType: LDKFramework.LDKCVec_UpdateFulfillHTLCZ) -> [LDKFramework.LDKUpdateFulfillHTLC]
  public class func new_LDKCVec_TxidZ(array: [LDKFramework.LDKThirtyTwoBytes]) -> LDKFramework.LDKCVec_TxidZ
  public class func LDKCVec_TxidZ_to_array(nativeType: LDKFramework.LDKCVec_TxidZ) -> [LDKFramework.LDKThirtyTwoBytes]
  public class func new_LDKCVec_C2Tuple_u32ScriptZZ(array: [LDKFramework.LDKC2Tuple_u32ScriptZ]) -> LDKFramework.LDKCVec_C2Tuple_u32ScriptZZ
  public class func LDKCVec_C2Tuple_u32ScriptZZ_to_array(nativeType: LDKFramework.LDKCVec_C2Tuple_u32ScriptZZ) -> [LDKFramework.LDKC2Tuple_u32ScriptZ]
  public class func new_LDKCVec_NodeAnnouncementZ(array: [LDKFramework.LDKNodeAnnouncement]) -> LDKFramework.LDKCVec_NodeAnnouncementZ
  public class func LDKCVec_NodeAnnouncementZ_to_array(nativeType: LDKFramework.LDKCVec_NodeAnnouncementZ) -> [LDKFramework.LDKNodeAnnouncement]
  public class func new_LDKCVec_u64Z(array: [Swift.UInt64]) -> LDKFramework.LDKCVec_u64Z
  public class func LDKCVec_u64Z_to_array(nativeType: LDKFramework.LDKCVec_u64Z) -> [Swift.UInt64]
  public class func new_LDKCVec_SignatureZ(array: [[Swift.UInt8]]) -> LDKFramework.LDKCVec_SignatureZ
  public class func LDKCVec_SignatureZ_to_array(nativeType: LDKFramework.LDKCVec_SignatureZ) -> [[Swift.UInt8]]
  public class func new_LDKCVec_ChannelDetailsZ(array: [LDKFramework.LDKChannelDetails]) -> LDKFramework.LDKCVec_ChannelDetailsZ
  public class func LDKCVec_ChannelDetailsZ_to_array(nativeType: LDKFramework.LDKCVec_ChannelDetailsZ) -> [LDKFramework.LDKChannelDetails]
  public class func new_LDKCVec_CVec_u8ZZ(array: [[Swift.UInt8]]) -> LDKFramework.LDKCVec_CVec_u8ZZ
  public class func LDKCVec_CVec_u8ZZ_to_array(nativeType: LDKFramework.LDKCVec_CVec_u8ZZ) -> [[Swift.UInt8]]
  public class func new_LDKCVec_PublicKeyZ(array: [[Swift.UInt8]]) -> LDKFramework.LDKCVec_PublicKeyZ
  public class func LDKCVec_PublicKeyZ_to_array(nativeType: LDKFramework.LDKCVec_PublicKeyZ) -> [[Swift.UInt8]]
  public class func new_LDKCVec_CResult_NoneAPIErrorZZ(array: [LDKFramework.LDKCResult_NoneAPIErrorZ]) -> LDKFramework.LDKCVec_CResult_NoneAPIErrorZZ
  public class func LDKCVec_CResult_NoneAPIErrorZZ_to_array(nativeType: LDKFramework.LDKCVec_CResult_NoneAPIErrorZZ) -> [LDKFramework.LDKCResult_NoneAPIErrorZ]
  public class func new_LDKCVec_UpdateFailHTLCZ(array: [LDKFramework.LDKUpdateFailHTLC]) -> LDKFramework.LDKCVec_UpdateFailHTLCZ
  public class func LDKCVec_UpdateFailHTLCZ_to_array(nativeType: LDKFramework.LDKCVec_UpdateFailHTLCZ) -> [LDKFramework.LDKUpdateFailHTLC]
  public class func new_LDKCVec_APIErrorZ(array: [LDKFramework.LDKAPIError]) -> LDKFramework.LDKCVec_APIErrorZ
  public class func LDKCVec_APIErrorZ_to_array(nativeType: LDKFramework.LDKCVec_APIErrorZ) -> [LDKFramework.LDKAPIError]
  public class func new_LDKCVec_ChannelMonitorZ(array: [LDKFramework.LDKChannelMonitor]) -> LDKFramework.LDKCVec_ChannelMonitorZ
  public class func LDKCVec_ChannelMonitorZ_to_array(nativeType: LDKFramework.LDKCVec_ChannelMonitorZ) -> [LDKFramework.LDKChannelMonitor]
  public class func new_LDKCVec_MessageSendEventZ(array: [LDKFramework.LDKMessageSendEvent]) -> LDKFramework.LDKCVec_MessageSendEventZ
  public class func LDKCVec_MessageSendEventZ_to_array(nativeType: LDKFramework.LDKCVec_MessageSendEventZ) -> [LDKFramework.LDKMessageSendEvent]
  public class func new_LDKCVec_NetAddressZ(array: [LDKFramework.LDKNetAddress]) -> LDKFramework.LDKCVec_NetAddressZ
  public class func LDKCVec_NetAddressZ_to_array(nativeType: LDKFramework.LDKCVec_NetAddressZ) -> [LDKFramework.LDKNetAddress]
  public class func new_LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ(array: [LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> LDKFramework.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ
  public class func LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_to_array(nativeType: LDKFramework.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ) -> [LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func new_LDKCVec_RouteHintHopZ(array: [LDKFramework.LDKRouteHintHop]) -> LDKFramework.LDKCVec_RouteHintHopZ
  public class func LDKCVec_RouteHintHopZ_to_array(nativeType: LDKFramework.LDKCVec_RouteHintHopZ) -> [LDKFramework.LDKRouteHintHop]
  public class func new_LDKCVec_CVec_RouteHopZZ(array: [[LDKFramework.LDKRouteHop]]) -> LDKFramework.LDKCVec_CVec_RouteHopZZ
  public class func LDKCVec_CVec_RouteHopZZ_to_array(nativeType: LDKFramework.LDKCVec_CVec_RouteHopZZ) -> [[LDKFramework.LDKRouteHop]]
  public class func new_LDKCVec_TransactionZ(array: [[Swift.UInt8]]) -> LDKFramework.LDKCVec_TransactionZ
  public class func LDKCVec_TransactionZ_to_array(nativeType: LDKFramework.LDKCVec_TransactionZ) -> [[Swift.UInt8]]
  public class func new_LDKCVec_u8Z(array: [Swift.UInt8]) -> LDKFramework.LDKCVec_u8Z
  public class func LDKCVec_u8Z_to_array(nativeType: LDKFramework.LDKCVec_u8Z) -> [Swift.UInt8]
  public class func new_LDKCVec_RouteHintZ(array: [LDKFramework.LDKRouteHint]) -> LDKFramework.LDKCVec_RouteHintZ
  public class func LDKCVec_RouteHintZ_to_array(nativeType: LDKFramework.LDKCVec_RouteHintZ) -> [LDKFramework.LDKRouteHint]
  public class func new_LDKCVec_UpdateAddHTLCZ(array: [LDKFramework.LDKUpdateAddHTLC]) -> LDKFramework.LDKCVec_UpdateAddHTLCZ
  public class func LDKCVec_UpdateAddHTLCZ_to_array(nativeType: LDKFramework.LDKCVec_UpdateAddHTLCZ) -> [LDKFramework.LDKUpdateAddHTLC]
  public class func new_LDKCVec_C2Tuple_u32TxOutZZ(array: [LDKFramework.LDKC2Tuple_u32TxOutZ]) -> LDKFramework.LDKCVec_C2Tuple_u32TxOutZZ
  public class func LDKCVec_C2Tuple_u32TxOutZZ_to_array(nativeType: LDKFramework.LDKCVec_C2Tuple_u32TxOutZZ) -> [LDKFramework.LDKC2Tuple_u32TxOutZ]
  public class func new_LDKCVec_UpdateFailMalformedHTLCZ(array: [LDKFramework.LDKUpdateFailMalformedHTLC]) -> LDKFramework.LDKCVec_UpdateFailMalformedHTLCZ
  public class func LDKCVec_UpdateFailMalformedHTLCZ_to_array(nativeType: LDKFramework.LDKCVec_UpdateFailMalformedHTLCZ) -> [LDKFramework.LDKUpdateFailMalformedHTLC]
  public class func new_LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ(array: [LDKFramework.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> LDKFramework.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ
  public class func LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_to_array(nativeType: LDKFramework.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ) -> [LDKFramework.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func new_LDKCVec_EventZ(array: [LDKFramework.LDKEvent]) -> LDKFramework.LDKCVec_EventZ
  public class func LDKCVec_EventZ_to_array(nativeType: LDKFramework.LDKCVec_EventZ) -> [LDKFramework.LDKEvent]
  public class func new_LDKCVec_TransactionOutputsZ(array: [LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> LDKFramework.LDKCVec_TransactionOutputsZ
  public class func LDKCVec_TransactionOutputsZ_to_array(nativeType: LDKFramework.LDKCVec_TransactionOutputsZ) -> [LDKFramework.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func instanceToPointer(instance: Swift.AnyObject) -> Swift.UnsafeMutableRawPointer
  public class func pointerToInstance<T>(pointer: Swift.UnsafeRawPointer) -> T where T : AnyObject
  public class func new_LDKu8slice(array: [Swift.UInt8]) -> LDKFramework.LDKu8slice
  public class func LDKu8slice_to_array(nativeType: LDKFramework.LDKu8slice) -> [Swift.UInt8]
  public class func new_LDKTransaction(array: [Swift.UInt8]) -> LDKFramework.LDKTransaction
  public class func LDKTransaction_to_array(nativeType: LDKFramework.LDKTransaction) -> [Swift.UInt8]
  public class func LDKStr_to_string(nativeType: LDKFramework.LDKStr) -> Swift.String
  public class func UnsafeIntPointer_to_string(nativeType: Swift.UnsafePointer<Swift.Int8>) -> Swift.String
  public class func new_LDKStr(string: Swift.String) -> LDKFramework.LDKStr
  @objc deinit
}
public class Result_FundingSignedDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_FundingSignedDecodeErrorZ)
  @objc deinit
}
public class CommitmentSigned {
  public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8], htlc_signatures_arg: [[Swift.UInt8]])
  public init(pointer: LDKFramework.LDKCommitmentSigned)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func set_htlc_signatures(val: [[Swift.UInt8]])
  public func clone(orig: LDKFramework.CommitmentSigned) -> LDKFramework.CommitmentSigned
  public func write(obj: LDKFramework.CommitmentSigned) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_CommitmentSignedDecodeErrorZ
  @objc deinit
}
public class BestBlock {
  public init(block_hash: [Swift.UInt8], height: Swift.UInt32)
  public init(pointer: LDKFramework.LDKBestBlock)
  public func clone(orig: LDKFramework.BestBlock) -> LDKFramework.BestBlock
  public func block_hash() -> [Swift.UInt8]
  public func height() -> Swift.UInt32
  @objc deinit
}
public class Result_UpdateFailMalformedHTLCDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ)
  @objc deinit
}
public class Result_OutPointDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_OutPointDecodeErrorZ)
  @objc deinit
}
public class QueryShortChannelIds {
  public init(chain_hash_arg: [Swift.UInt8], short_channel_ids_arg: [Swift.UInt64])
  public init(pointer: LDKFramework.LDKQueryShortChannelIds)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func set_short_channel_ids(val: [Swift.UInt64])
  public func clone(orig: LDKFramework.QueryShortChannelIds) -> LDKFramework.QueryShortChannelIds
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_QueryShortChannelIdsDecodeErrorZ
  public func write(obj: LDKFramework.QueryShortChannelIds) -> [Swift.UInt8]
  @objc deinit
}
public class Result_HTLCOutputInCommitmentDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_HTLCOutputInCommitmentDecodeErrorZ)
  @objc deinit
}
public class Result_AnnouncementSignaturesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_AnnouncementSignaturesDecodeErrorZ)
  @objc deinit
}
public class Result_TxOutAccessErrorZ {
  public init(pointer: LDKFramework.LDKCResult_TxOutAccessErrorZ)
  @objc deinit
}
public class ChannelAnnouncement {
  public init(node_signature_1_arg: [Swift.UInt8], node_signature_2_arg: [Swift.UInt8], bitcoin_signature_1_arg: [Swift.UInt8], bitcoin_signature_2_arg: [Swift.UInt8], contents_arg: LDKFramework.UnsignedChannelAnnouncement)
  public init(pointer: LDKFramework.LDKChannelAnnouncement)
  public func get_node_signature_1() -> [Swift.UInt8]
  public func set_node_signature_1(val: [Swift.UInt8])
  public func get_node_signature_2() -> [Swift.UInt8]
  public func set_node_signature_2(val: [Swift.UInt8])
  public func get_bitcoin_signature_1() -> [Swift.UInt8]
  public func set_bitcoin_signature_1(val: [Swift.UInt8])
  public func get_bitcoin_signature_2() -> [Swift.UInt8]
  public func set_bitcoin_signature_2(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework.UnsignedChannelAnnouncement
  public func set_contents(val: LDKFramework.UnsignedChannelAnnouncement)
  public func clone(orig: LDKFramework.ChannelAnnouncement) -> LDKFramework.ChannelAnnouncement
  public func write(obj: LDKFramework.ChannelAnnouncement) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelAnnouncementDecodeErrorZ
  @objc deinit
}
public class ReplyChannelRange {
  public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32, sync_complete_arg: Swift.Bool, short_channel_ids_arg: [Swift.UInt64])
  public init(pointer: LDKFramework.LDKReplyChannelRange)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_blocknum() -> Swift.UInt32
  public func set_first_blocknum(val: Swift.UInt32)
  public func get_number_of_blocks() -> Swift.UInt32
  public func set_number_of_blocks(val: Swift.UInt32)
  public func get_sync_complete() -> Swift.Bool
  public func set_sync_complete(val: Swift.Bool)
  public func set_short_channel_ids(val: [Swift.UInt64])
  public func clone(orig: LDKFramework.ReplyChannelRange) -> LDKFramework.ReplyChannelRange
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ReplyChannelRangeDecodeErrorZ
  public func write(obj: LDKFramework.ReplyChannelRange) -> [Swift.UInt8]
  @objc deinit
}
open class BaseSign {
  public var cOpaqueStruct: LDKFramework.LDKBaseSign?
  public init()
  public init(pointer: LDKFramework.LDKBaseSign)
  open func get_per_commitment_point(idx: Swift.UInt64) -> [Swift.UInt8]
  open func release_commitment_secret(idx: Swift.UInt64) -> [Swift.UInt8]
  open func channel_keys_id() -> [Swift.UInt8]
  open func sign_counterparty_commitment(commitment_tx: LDKFramework.CommitmentTransaction) -> LDKFramework.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  open func sign_holder_commitment_and_htlcs(commitment_tx: LDKFramework.HolderCommitmentTransaction) -> LDKFramework.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  open func sign_justice_transaction(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?, htlc: LDKFramework.HTLCOutputInCommitment) -> LDKFramework.Result_SignatureNoneZ
  open func sign_counterparty_htlc_transaction(htlc_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_point: [Swift.UInt8], htlc: LDKFramework.HTLCOutputInCommitment) -> LDKFramework.Result_SignatureNoneZ
  open func sign_closing_transaction(closing_tx: [Swift.UInt8]) -> LDKFramework.Result_SignatureNoneZ
  open func sign_channel_announcement(msg: LDKFramework.UnsignedChannelAnnouncement) -> LDKFramework.Result_SignatureNoneZ
  open func ready_channel(channel_parameters: LDKFramework.ChannelTransactionParameters)
  open func free()
  @objc deinit
}
public class Result_StringErrorZ {
  public init(pointer: LDKFramework.LDKCResult_StringErrorZ)
  @objc deinit
}
public class Result_PongDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PongDecodeErrorZ)
  @objc deinit
}
public class Result_ChannelAnnouncementDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelAnnouncementDecodeErrorZ)
  @objc deinit
}
public class Result_ReplyChannelRangeDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ReplyChannelRangeDecodeErrorZ)
  @objc deinit
}
public class ChannelHandshakeConfig {
  public init()
  public init(pointer: LDKFramework.LDKChannelHandshakeConfig)
  public func get_minimum_depth() -> Swift.UInt32
  public func set_minimum_depth(val: Swift.UInt32)
  public func get_our_to_self_delay() -> Swift.UInt16
  public func set_our_to_self_delay(val: Swift.UInt16)
  public func get_our_htlc_minimum_msat() -> Swift.UInt64
  public func set_our_htlc_minimum_msat(val: Swift.UInt64)
  public func clone(orig: LDKFramework.ChannelHandshakeConfig) -> LDKFramework.ChannelHandshakeConfig
  @objc deinit
}
public class Sha256 {
  public init(pointer: LDKFramework.LDKSha256)
  public func clone(orig: LDKFramework.Sha256) -> LDKFramework.Sha256
  @objc deinit
}
public class AcceptChannel {
  public init(pointer: LDKFramework.LDKAcceptChannel)
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_dust_limit_satoshis() -> Swift.UInt64
  public func set_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_channel_reserve_satoshis() -> Swift.UInt64
  public func set_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_minimum_depth() -> Swift.UInt32
  public func set_minimum_depth(val: Swift.UInt32)
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func get_max_accepted_htlcs() -> Swift.UInt16
  public func set_max_accepted_htlcs(val: Swift.UInt16)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func get_first_per_commitment_point() -> [Swift.UInt8]
  public func set_first_per_commitment_point(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.AcceptChannel) -> LDKFramework.AcceptChannel
  public func write(obj: LDKFramework.AcceptChannel) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_AcceptChannelDecodeErrorZ
  @objc deinit
}
public class Result_UnsignedChannelUpdateDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UnsignedChannelUpdateDecodeErrorZ)
  @objc deinit
}
public class SpendableOutputDescriptor {
  public init(pointer: LDKFramework.LDKSpendableOutputDescriptor)
  @objc deinit
}
public class Result_NodeFeaturesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NodeFeaturesDecodeErrorZ)
  @objc deinit
}
public class Result_DescriptionCreationErrorZ {
  public init(pointer: LDKFramework.LDKCResult_DescriptionCreationErrorZ)
  @objc deinit
}
public class Option_u64Z {
  public init(value: Swift.UInt64?)
  public init(pointer: LDKFramework.LDKCOption_u64Z)
  public func getValue() -> Swift.UInt64?
  @objc deinit
}
open class KeysInterface {
  public var cOpaqueStruct: LDKFramework.LDKKeysInterface?
  public init()
  public init(pointer: LDKFramework.LDKKeysInterface)
  open func get_node_secret() -> [Swift.UInt8]
  open func get_destination_script() -> [Swift.UInt8]
  open func get_shutdown_pubkey() -> [Swift.UInt8]
  open func get_channel_signer(inbound: Swift.Bool, channel_value_satoshis: Swift.UInt64) -> LDKFramework.Sign
  open func get_secure_random_bytes() -> [Swift.UInt8]
  open func read_chan_signer(reader: [Swift.UInt8]) -> LDKFramework.Result_SignDecodeErrorZ
  open func sign_invoice(invoice_preimage: [Swift.UInt8]) -> LDKFramework.Result_RecoverableSignatureNoneZ
  open func free()
  @objc deinit
}
public class C2Tuple_u32ScriptZ {
  public init(pointer: LDKFramework.LDKC2Tuple_u32ScriptZ)
  public func clone(orig: LDKFramework.C2Tuple_u32ScriptZ) -> LDKFramework.C2Tuple_u32ScriptZ
  public func new(a: Swift.UInt32, b: [Swift.UInt8]) -> LDKFramework.C2Tuple_u32ScriptZ
  @objc deinit
}
public class Result_FundingCreatedDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_FundingCreatedDecodeErrorZ)
  @objc deinit
}
public class Result_InitFeaturesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InitFeaturesDecodeErrorZ)
  @objc deinit
}
public class Option_u32Z {
  public init(value: Swift.UInt32?)
  public init(pointer: LDKFramework.LDKCOption_u32Z)
  public func getValue() -> Swift.UInt32?
  @objc deinit
}
public class MonitorEvent {
  public init(pointer: LDKFramework.LDKMonitorEvent)
  @objc deinit
}
public class DirectionalChannelInfo {
  public init(last_update_arg: Swift.UInt32, enabled_arg: Swift.Bool, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: Swift.UInt64, htlc_maximum_msat_arg: LDKFramework.Option_u64Z, fees_arg: LDKFramework.RoutingFees, last_update_message_arg: LDKFramework.ChannelUpdate)
  public init(pointer: LDKFramework.LDKDirectionalChannelInfo)
  public func get_last_update() -> Swift.UInt32
  public func set_last_update(val: Swift.UInt32)
  public func get_enabled() -> Swift.Bool
  public func set_enabled(val: Swift.Bool)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_htlc_maximum_msat() -> LDKFramework.Option_u64Z
  public func set_htlc_maximum_msat(val: LDKFramework.Option_u64Z)
  public func get_fees() -> LDKFramework.RoutingFees
  public func set_fees(val: LDKFramework.RoutingFees)
  public func get_last_update_message() -> LDKFramework.ChannelUpdate
  public func set_last_update_message(val: LDKFramework.ChannelUpdate)
  public func clone(orig: LDKFramework.DirectionalChannelInfo) -> LDKFramework.DirectionalChannelInfo
  public func write(obj: LDKFramework.DirectionalChannelInfo) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_DirectionalChannelInfoDecodeErrorZ
  @objc deinit
}
public class UpdateFulfillHTLC {
  public init(channel_id_arg: [Swift.UInt8], htlc_id_arg: Swift.UInt64, payment_preimage_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKUpdateFulfillHTLC)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_payment_preimage() -> [Swift.UInt8]
  public func set_payment_preimage(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.UpdateFulfillHTLC) -> LDKFramework.UpdateFulfillHTLC
  public func write(obj: LDKFramework.UpdateFulfillHTLC) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UpdateFulfillHTLCDecodeErrorZ
  @objc deinit
}
public class UnsignedChannelAnnouncement {
  public init(pointer: LDKFramework.LDKUnsignedChannelAnnouncement)
  public func get_features() -> LDKFramework.ChannelFeatures
  public func set_features(val: LDKFramework.ChannelFeatures)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_node_id_1() -> [Swift.UInt8]
  public func set_node_id_1(val: [Swift.UInt8])
  public func get_node_id_2() -> [Swift.UInt8]
  public func set_node_id_2(val: [Swift.UInt8])
  public func get_bitcoin_key_1() -> [Swift.UInt8]
  public func set_bitcoin_key_1(val: [Swift.UInt8])
  public func get_bitcoin_key_2() -> [Swift.UInt8]
  public func set_bitcoin_key_2(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.UnsignedChannelAnnouncement) -> LDKFramework.UnsignedChannelAnnouncement
  public func write(obj: LDKFramework.UnsignedChannelAnnouncement) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UnsignedChannelAnnouncementDecodeErrorZ
  @objc deinit
}
open class Confirm {
  public var cOpaqueStruct: LDKFramework.LDKConfirm?
  public init()
  public init(pointer: LDKFramework.LDKConfirm)
  open func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LDKFramework.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
  open func transaction_unconfirmed(txid: [Swift.UInt8]?)
  open func best_block_updated(header: [Swift.UInt8]?, height: Swift.UInt32)
  open func get_relevant_txids() -> [LDKFramework.LDKTxid]
  open func free()
  @objc deinit
}
public class ChainMonitor {
  public init(chain_source: LDKFramework.Filter?, broadcaster: LDKFramework.BroadcasterInterface, logger: LDKFramework.Logger, feeest: LDKFramework.FeeEstimator, persister: LDKFramework.Persist)
  public init(pointer: LDKFramework.LDKChainMonitor)
  public func as_Listen() -> LDKFramework.Listen
  public func as_Confirm() -> LDKFramework.Confirm
  public func as_Watch() -> LDKFramework.Watch
  public func as_EventsProvider() -> LDKFramework.EventsProvider
  @objc deinit
}
public class Result_TxCreationKeysDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_TxCreationKeysDecodeErrorZ)
  @objc deinit
}
public class Result_NoneErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NoneErrorZ)
  @objc deinit
}
public class PositiveTimestamp {
  public init(pointer: LDKFramework.LDKPositiveTimestamp)
  public func clone(orig: LDKFramework.PositiveTimestamp) -> LDKFramework.PositiveTimestamp
  public func from_unix_timestamp(unix_seconds: Swift.UInt64) -> LDKFramework.Result_PositiveTimestampCreationErrorZ
  public func from_system_time(time: Swift.UInt64) -> LDKFramework.Result_PositiveTimestampCreationErrorZ
  public func as_unix_timestamp() -> Swift.UInt64
  public func as_time() -> Swift.UInt64
  @objc deinit
}
public class NodeAnnouncement {
  public init(signature_arg: [Swift.UInt8], contents_arg: LDKFramework.UnsignedNodeAnnouncement)
  public init(pointer: LDKFramework.LDKNodeAnnouncement)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework.UnsignedNodeAnnouncement
  public func set_contents(val: LDKFramework.UnsignedNodeAnnouncement)
  public func clone(orig: LDKFramework.NodeAnnouncement) -> LDKFramework.NodeAnnouncement
  public func write(obj: LDKFramework.NodeAnnouncement) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_NodeAnnouncementDecodeErrorZ
  @objc deinit
}
public class Ping {
  public init(ponglen_arg: Swift.UInt16, byteslen_arg: Swift.UInt16)
  public init(pointer: LDKFramework.LDKPing)
  public func get_ponglen() -> Swift.UInt16
  public func set_ponglen(val: Swift.UInt16)
  public func get_byteslen() -> Swift.UInt16
  public func set_byteslen(val: Swift.UInt16)
  public func clone(orig: LDKFramework.Ping) -> LDKFramework.Ping
  public func write(obj: LDKFramework.Ping) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_PingDecodeErrorZ
  @objc deinit
}
public class ChannelTransactionParameters {
  public init(holder_pubkeys_arg: LDKFramework.ChannelPublicKeys, holder_selected_contest_delay_arg: Swift.UInt16, is_outbound_from_holder_arg: Swift.Bool, counterparty_parameters_arg: LDKFramework.CounterpartyChannelTransactionParameters, funding_outpoint_arg: LDKFramework.OutPoint)
  public init(pointer: LDKFramework.LDKChannelTransactionParameters)
  public func get_holder_pubkeys() -> LDKFramework.ChannelPublicKeys
  public func set_holder_pubkeys(val: LDKFramework.ChannelPublicKeys)
  public func get_holder_selected_contest_delay() -> Swift.UInt16
  public func set_holder_selected_contest_delay(val: Swift.UInt16)
  public func get_is_outbound_from_holder() -> Swift.Bool
  public func set_is_outbound_from_holder(val: Swift.Bool)
  public func get_counterparty_parameters() -> LDKFramework.CounterpartyChannelTransactionParameters
  public func set_counterparty_parameters(val: LDKFramework.CounterpartyChannelTransactionParameters)
  public func get_funding_outpoint() -> LDKFramework.OutPoint
  public func set_funding_outpoint(val: LDKFramework.OutPoint)
  public func clone(orig: LDKFramework.ChannelTransactionParameters) -> LDKFramework.ChannelTransactionParameters
  public func is_populated() -> Swift.Bool
  public func as_holder_broadcastable() -> LDKFramework.DirectedChannelTransactionParameters
  public func as_counterparty_broadcastable() -> LDKFramework.DirectedChannelTransactionParameters
  public func write(obj: LDKFramework.ChannelTransactionParameters) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelTransactionParametersDecodeErrorZ
  @objc deinit
}
public class ChannelHandshakeLimits {
  public init()
  public init(pointer: LDKFramework.LDKChannelHandshakeLimits)
  public func get_min_funding_satoshis() -> Swift.UInt64
  public func set_min_funding_satoshis(val: Swift.UInt64)
  public func get_max_htlc_minimum_msat() -> Swift.UInt64
  public func set_max_htlc_minimum_msat(val: Swift.UInt64)
  public func get_min_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_min_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_max_channel_reserve_satoshis() -> Swift.UInt64
  public func set_max_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_min_max_accepted_htlcs() -> Swift.UInt16
  public func set_min_max_accepted_htlcs(val: Swift.UInt16)
  public func get_min_dust_limit_satoshis() -> Swift.UInt64
  public func set_min_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_dust_limit_satoshis() -> Swift.UInt64
  public func set_max_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_minimum_depth() -> Swift.UInt32
  public func set_max_minimum_depth(val: Swift.UInt32)
  public func get_force_announced_channel_preference() -> Swift.Bool
  public func set_force_announced_channel_preference(val: Swift.Bool)
  public func get_their_to_self_delay() -> Swift.UInt16
  public func set_their_to_self_delay(val: Swift.UInt16)
  public func clone(orig: LDKFramework.ChannelHandshakeLimits) -> LDKFramework.ChannelHandshakeLimits
  @objc deinit
}
public class C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ {
  public init(pointer: LDKFramework.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ)
  public func clone(orig: LDKFramework.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ) -> LDKFramework.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
  public func new(a: LDKFramework.ChannelAnnouncement, b: LDKFramework.ChannelUpdate, c: LDKFramework.ChannelUpdate) -> LDKFramework.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
  @objc deinit
}
public class NetGraphMsgHandler {
  public init(chain_access: LDKFramework.Access?, logger: LDKFramework.Logger, network_graph: LDKFramework.NetworkGraph)
  public init(pointer: LDKFramework.LDKNetGraphMsgHandler)
  public func add_chain_access(chain_access: LDKFramework.Access?)
  public func read_locked_graph() -> LDKFramework.LockedNetworkGraph
  public func as_RoutingMessageHandler() -> LDKFramework.RoutingMessageHandler
  public func as_MessageSendEventsProvider() -> LDKFramework.MessageSendEventsProvider
  @objc deinit
}
public class Result_RouteLightningErrorZ {
  public init(pointer: LDKFramework.LDKCResult_RouteLightningErrorZ)
  @objc deinit
}
public class Result_InitDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InitDecodeErrorZ)
  @objc deinit
}
public class Route {
  public init(paths_arg: [[LDKFramework.LDKRouteHop]])
  public init(pointer: LDKFramework.LDKRoute)
  public func set_paths(val: [[LDKFramework.LDKRouteHop]])
  public func clone(orig: LDKFramework.Route) -> LDKFramework.Route
  public func write(obj: LDKFramework.Route) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_RouteDecodeErrorZ
  @objc deinit
}
public class RoutingFees {
  public init(base_msat_arg: Swift.UInt32, proportional_millionths_arg: Swift.UInt32)
  public init(pointer: LDKFramework.LDKRoutingFees)
  public func get_base_msat() -> Swift.UInt32
  public func set_base_msat(val: Swift.UInt32)
  public func get_proportional_millionths() -> Swift.UInt32
  public func set_proportional_millionths(val: Swift.UInt32)
  public func clone(orig: LDKFramework.RoutingFees) -> LDKFramework.RoutingFees
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_RoutingFeesDecodeErrorZ
  public func write(obj: LDKFramework.RoutingFees) -> [Swift.UInt8]
  @objc deinit
}
public class PayeePubKey {
  public init(pointer: LDKFramework.LDKPayeePubKey)
  public func clone(orig: LDKFramework.PayeePubKey) -> LDKFramework.PayeePubKey
  @objc deinit
}
public class NetworkGraph {
  public init(genesis_hash: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKNetworkGraph)
  public func clone(orig: LDKFramework.NetworkGraph) -> LDKFramework.NetworkGraph
  public func write(obj: LDKFramework.NetworkGraph) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_NetworkGraphDecodeErrorZ
  public func update_node_from_announcement(msg: LDKFramework.NodeAnnouncement) -> LDKFramework.Result_NoneLightningErrorZ
  public func update_node_from_unsigned_announcement(msg: LDKFramework.UnsignedNodeAnnouncement) -> LDKFramework.Result_NoneLightningErrorZ
  public func update_channel_from_announcement(msg: LDKFramework.ChannelAnnouncement, chain_access: LDKFramework.Access?) -> LDKFramework.Result_NoneLightningErrorZ
  public func update_channel_from_unsigned_announcement(msg: LDKFramework.UnsignedChannelAnnouncement, chain_access: LDKFramework.Access?) -> LDKFramework.Result_NoneLightningErrorZ
  public func close_channel_from_update(short_channel_id: Swift.UInt64, is_permanent: Swift.Bool)
  public func update_channel(msg: LDKFramework.ChannelUpdate) -> LDKFramework.Result_NoneLightningErrorZ
  public func update_channel_unsigned(msg: LDKFramework.UnsignedChannelUpdate) -> LDKFramework.Result_NoneLightningErrorZ
  @objc deinit
}
public class UnsignedNodeAnnouncement {
  public init(pointer: LDKFramework.LDKUnsignedNodeAnnouncement)
  public func get_features() -> LDKFramework.NodeFeatures
  public func set_features(val: LDKFramework.NodeFeatures)
  public func get_timestamp() -> Swift.UInt32
  public func set_timestamp(val: Swift.UInt32)
  public func get_node_id() -> [Swift.UInt8]
  public func set_node_id(val: [Swift.UInt8])
  public func get_rgb() -> [Swift.UInt8]
  public func set_rgb(val: [Swift.UInt8])
  public func get_alias() -> [Swift.UInt8]
  public func set_alias(val: [Swift.UInt8])
  public func set_addresses(val: [LDKFramework.LDKNetAddress])
  public func clone(orig: LDKFramework.UnsignedNodeAnnouncement) -> LDKFramework.UnsignedNodeAnnouncement
  public func write(obj: LDKFramework.UnsignedNodeAnnouncement) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UnsignedNodeAnnouncementDecodeErrorZ
  @objc deinit
}
public class RawInvoice {
  public init(pointer: LDKFramework.LDKRawInvoice)
  public func get_data() -> LDKFramework.RawDataPart
  public func set_data(val: LDKFramework.RawDataPart)
  public func clone(orig: LDKFramework.RawInvoice) -> LDKFramework.RawInvoice
  public func hash() -> [Swift.UInt8]
  public func payment_hash() -> LDKFramework.Sha256
  public func description() -> LDKFramework.Description
  public func payee_pub_key() -> LDKFramework.PayeePubKey
  public func description_hash() -> LDKFramework.Sha256
  public func expiry_time() -> LDKFramework.ExpiryTime
  public func min_final_cltv_expiry() -> LDKFramework.MinFinalCltvExpiry
  public func payment_secret() -> [Swift.UInt8]
  public func features() -> LDKFramework.InvoiceFeatures
  public func routes() -> [LDKFramework.LDKRouteHint]
  public func amount_pico_btc() -> LDKFramework.Option_u64Z
  public func currency() -> LDKFramework.LDKCurrency
  @objc deinit
}
public class UpdateFailMalformedHTLC {
  public init(pointer: LDKFramework.LDKUpdateFailMalformedHTLC)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_failure_code() -> Swift.UInt16
  public func set_failure_code(val: Swift.UInt16)
  public func clone(orig: LDKFramework.UpdateFailMalformedHTLC) -> LDKFramework.UpdateFailMalformedHTLC
  public func write(obj: LDKFramework.UpdateFailMalformedHTLC) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UpdateFailMalformedHTLCDecodeErrorZ
  @objc deinit
}
public class Result_ChannelPublicKeysDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelPublicKeysDecodeErrorZ)
  @objc deinit
}
public class KeysManager {
  public init(seed: [Swift.UInt8], starting_time_secs: Swift.UInt64, starting_time_nanos: Swift.UInt32)
  public init(pointer: LDKFramework.LDKKeysManager)
  public func derive_channel_keys(channel_value_satoshis: Swift.UInt64, params: [Swift.UInt8]) -> LDKFramework.InMemorySigner
  public func spend_spendable_outputs(descriptors: [LDKFramework.LDKSpendableOutputDescriptor], outputs: [LDKFramework.LDKTxOut], change_destination_script: [Swift.UInt8], feerate_sat_per_1000_weight: Swift.UInt32) -> LDKFramework.Result_TransactionNoneZ
  public func as_KeysInterface() -> LDKFramework.KeysInterface
  @objc deinit
}
public class C3Tuple_RawInvoice_u832InvoiceSignatureZ {
  public init(pointer: LDKFramework.LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ)
  public func new(a: LDKFramework.RawInvoice, b: [Swift.UInt8], c: LDKFramework.InvoiceSignature) -> LDKFramework.C3Tuple_RawInvoice_u832InvoiceSignatureZ
  @objc deinit
}
public class Result_SignDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_SignDecodeErrorZ)
  @objc deinit
}
public class RawDataPart {
  public init(pointer: LDKFramework.LDKRawDataPart)
  public func get_timestamp() -> LDKFramework.PositiveTimestamp
  public func set_timestamp(val: LDKFramework.PositiveTimestamp)
  public func clone(orig: LDKFramework.RawDataPart) -> LDKFramework.RawDataPart
  @objc deinit
}
public class NodeFeatures {
  public init()
  public init(pointer: LDKFramework.LDKNodeFeatures)
  public func clone(orig: LDKFramework.NodeFeatures) -> LDKFramework.NodeFeatures
  public func write(obj: LDKFramework.NodeFeatures) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_NodeFeaturesDecodeErrorZ
  @objc deinit
}
public class Result_NonePaymentSendFailureZ {
  public init(pointer: LDKFramework.LDKCResult_NonePaymentSendFailureZ)
  @objc deinit
}
public class ChannelManager {
  public init(fee_est: LDKFramework.FeeEstimator, chain_monitor: LDKFramework.Watch, tx_broadcaster: LDKFramework.BroadcasterInterface, logger: LDKFramework.Logger, keys_manager: LDKFramework.KeysInterface, config: LDKFramework.UserConfig, params: LDKFramework.ChainParameters)
  public init(pointer: LDKFramework.LDKChannelManager)
  public func get_current_default_configuration() -> LDKFramework.UserConfig
  public func create_channel(their_network_key: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, push_msat: Swift.UInt64, user_id: Swift.UInt64, override_config: LDKFramework.UserConfig) -> LDKFramework.Result_NoneAPIErrorZ
  public func list_channels() -> [LDKFramework.LDKChannelDetails]
  public func list_usable_channels() -> [LDKFramework.LDKChannelDetails]
  public func close_channel(channel_id: [Swift.UInt8]) -> LDKFramework.Result_NoneAPIErrorZ
  public func force_close_channel(channel_id: [Swift.UInt8]) -> LDKFramework.Result_NoneAPIErrorZ
  public func force_close_all_channels()
  public func send_payment(route: LDKFramework.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework.Result_NonePaymentSendFailureZ
  public func funding_transaction_generated(temporary_channel_id: [Swift.UInt8], funding_transaction: [Swift.UInt8]) -> LDKFramework.Result_NoneAPIErrorZ
  public func broadcast_node_announcement(rgb: [Swift.UInt8], alias: [Swift.UInt8], addresses: [LDKFramework.LDKNetAddress])
  public func process_pending_htlc_forwards()
  public func timer_tick_occurred()
  public func fail_htlc_backwards(payment_hash: [Swift.UInt8]) -> Swift.Bool
  public func claim_funds(payment_preimage: [Swift.UInt8]) -> Swift.Bool
  public func get_our_node_id() -> [Swift.UInt8]
  public func channel_monitor_updated(funding_txo: LDKFramework.OutPoint, highest_applied_update_id: Swift.UInt64)
  public func create_inbound_payment(min_value_msat: LDKFramework.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32, user_payment_id: Swift.UInt64) -> LDKFramework.C2Tuple_PaymentHashPaymentSecretZ
  public func create_inbound_payment_for_hash(payment_hash: [Swift.UInt8], min_value_msat: LDKFramework.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32, user_payment_id: Swift.UInt64) -> LDKFramework.Result_PaymentSecretAPIErrorZ
  public func as_MessageSendEventsProvider() -> LDKFramework.MessageSendEventsProvider
  public func as_EventsProvider() -> LDKFramework.EventsProvider
  public func as_Listen() -> LDKFramework.Listen
  public func as_Confirm() -> LDKFramework.Confirm
  public func await_persistable_update_timeout(max_wait: Swift.UInt64) -> Swift.Bool
  public func await_persistable_update()
  public func as_ChannelMessageHandler() -> LDKFramework.ChannelMessageHandler
  public func write(obj: LDKFramework.ChannelManager) -> [Swift.UInt8]
  @objc deinit
}
public class Result_NoneSemanticErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NoneSemanticErrorZ)
  @objc deinit
}
public class ChannelDetails {
  public init(pointer: LDKFramework.LDKChannelDetails)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_short_channel_id() -> LDKFramework.Option_u64Z
  public func set_short_channel_id(val: LDKFramework.Option_u64Z)
  public func get_remote_network_id() -> [Swift.UInt8]
  public func set_remote_network_id(val: [Swift.UInt8])
  public func get_counterparty_features() -> LDKFramework.InitFeatures
  public func set_counterparty_features(val: LDKFramework.InitFeatures)
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func get_user_id() -> Swift.UInt64
  public func set_user_id(val: Swift.UInt64)
  public func get_outbound_capacity_msat() -> Swift.UInt64
  public func set_outbound_capacity_msat(val: Swift.UInt64)
  public func get_inbound_capacity_msat() -> Swift.UInt64
  public func set_inbound_capacity_msat(val: Swift.UInt64)
  public func get_is_live() -> Swift.Bool
  public func set_is_live(val: Swift.Bool)
  public func clone(orig: LDKFramework.ChannelDetails) -> LDKFramework.ChannelDetails
  @objc deinit
}
public class InitFeatures {
  public init()
  public init(pointer: LDKFramework.LDKInitFeatures)
  public func clone(orig: LDKFramework.InitFeatures) -> LDKFramework.InitFeatures
  public func write(obj: LDKFramework.InitFeatures) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_InitFeaturesDecodeErrorZ
  @objc deinit
}
public class Result_RevokeAndACKDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_RevokeAndACKDecodeErrorZ)
  @objc deinit
}
public class Result_UpdateFailHTLCDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UpdateFailHTLCDecodeErrorZ)
  @objc deinit
}
public class Result_RouteDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_RouteDecodeErrorZ)
  @objc deinit
}
public class Result_InvoiceSemanticErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InvoiceSemanticErrorZ)
  @objc deinit
}
public class Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ)
  @objc deinit
}
public class Result_InvoiceFeaturesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_InvoiceFeaturesDecodeErrorZ)
  @objc deinit
}
public class ErrorAction {
  public init(pointer: LDKFramework.LDKErrorAction)
  @objc deinit
}
public class DataLossProtect {
  public init(your_last_per_commitment_secret_arg: [Swift.UInt8], my_current_per_commitment_point_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKDataLossProtect)
  public func get_your_last_per_commitment_secret() -> [Swift.UInt8]
  public func set_your_last_per_commitment_secret(val: [Swift.UInt8])
  public func get_my_current_per_commitment_point() -> [Swift.UInt8]
  public func set_my_current_per_commitment_point(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.DataLossProtect) -> LDKFramework.DataLossProtect
  @objc deinit
}
public class UpdateFailHTLC {
  public init(pointer: LDKFramework.LDKUpdateFailHTLC)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func clone(orig: LDKFramework.UpdateFailHTLC) -> LDKFramework.UpdateFailHTLC
  public func write(obj: LDKFramework.UpdateFailHTLC) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UpdateFailHTLCDecodeErrorZ
  @objc deinit
}
public class Option_C2Tuple_usizeTransactionZZ {
  public init(value: LDKFramework.C2Tuple_usizeTransactionZ?)
  public init(pointer: LDKFramework.LDKCOption_C2Tuple_usizeTransactionZZ)
  public func getValue() -> LDKFramework.C2Tuple_usizeTransactionZ?
  @objc deinit
}
public class WatchedOutput {
  public init(block_hash_arg: [Swift.UInt8], outpoint_arg: LDKFramework.OutPoint, script_pubkey_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKWatchedOutput)
  public func get_block_hash() -> [Swift.UInt8]
  public func set_block_hash(val: [Swift.UInt8])
  public func get_outpoint() -> LDKFramework.OutPoint
  public func set_outpoint(val: LDKFramework.OutPoint)
  public func get_script_pubkey() -> [Swift.UInt8]
  public func set_script_pubkey(val: [Swift.UInt8])
  @objc deinit
}
open class BroadcasterInterface {
  public var cOpaqueStruct: LDKFramework.LDKBroadcasterInterface?
  public init()
  public init(pointer: LDKFramework.LDKBroadcasterInterface)
  open func broadcast_transaction(tx: [Swift.UInt8])
  open func free()
  @objc deinit
}
public class LightningError {
  public init(err_arg: Swift.String, action_arg: LDKFramework.ErrorAction)
  public init(pointer: LDKFramework.LDKLightningError)
  public func get_err() -> Swift.String
  public func set_err(val: Swift.String)
  public func get_action() -> LDKFramework.ErrorAction
  public func set_action(val: LDKFramework.ErrorAction)
  public func clone(orig: LDKFramework.LightningError) -> LDKFramework.LightningError
  @objc deinit
}
public class InvoiceSignature {
  public init(pointer: LDKFramework.LDKInvoiceSignature)
  public func clone(orig: LDKFramework.InvoiceSignature) -> LDKFramework.InvoiceSignature
  @objc deinit
}
public class Result_CommitmentTransactionDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_CommitmentTransactionDecodeErrorZ)
  @objc deinit
}
open class Sign {
  public var cOpaqueStruct: LDKFramework.LDKSign?
  public init()
  public init(pointer: LDKFramework.LDKSign)
  open func write() -> [Swift.UInt8]
  open func clone() -> Swift.UnsafeMutableRawPointer
  open func free()
  @objc deinit
}
public class Result_NonePeerHandleErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NonePeerHandleErrorZ)
  @objc deinit
}
public class Result_QueryShortChannelIdsDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_QueryShortChannelIdsDecodeErrorZ)
  @objc deinit
}
public class QueryChannelRange {
  public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32)
  public init(pointer: LDKFramework.LDKQueryChannelRange)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_blocknum() -> Swift.UInt32
  public func set_first_blocknum(val: Swift.UInt32)
  public func get_number_of_blocks() -> Swift.UInt32
  public func set_number_of_blocks(val: Swift.UInt32)
  public func clone(orig: LDKFramework.QueryChannelRange) -> LDKFramework.QueryChannelRange
  public func end_blocknum() -> Swift.UInt32
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_QueryChannelRangeDecodeErrorZ
  public func write(obj: LDKFramework.QueryChannelRange) -> [Swift.UInt8]
  @objc deinit
}
open class FeeEstimator {
  public var cOpaqueStruct: LDKFramework.LDKFeeEstimator?
  public init()
  public init(pointer: LDKFramework.LDKFeeEstimator)
  open func get_est_sat_per_1000_weight(confirmation_target: LDKFramework.LDKConfirmationTarget) -> Swift.UInt32
  open func free()
  @objc deinit
}
public class ReplyShortChannelIdsEnd {
  public init(chain_hash_arg: [Swift.UInt8], full_information_arg: Swift.Bool)
  public init(pointer: LDKFramework.LDKReplyShortChannelIdsEnd)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_full_information() -> Swift.Bool
  public func set_full_information(val: Swift.Bool)
  public func clone(orig: LDKFramework.ReplyShortChannelIdsEnd) -> LDKFramework.ReplyShortChannelIdsEnd
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ReplyShortChannelIdsEndDecodeErrorZ
  public func write(obj: LDKFramework.ReplyShortChannelIdsEnd) -> [Swift.UInt8]
  @objc deinit
}
public class MessageHandler {
  public init(chan_handler_arg: LDKFramework.ChannelMessageHandler, route_handler_arg: LDKFramework.RoutingMessageHandler)
  public init(pointer: LDKFramework.LDKMessageHandler)
  public func get_chan_handler() -> LDKFramework.ChannelMessageHandler
  public func set_chan_handler(val: LDKFramework.ChannelMessageHandler)
  public func get_route_handler() -> LDKFramework.RoutingMessageHandler
  public func set_route_handler(val: LDKFramework.RoutingMessageHandler)
  @objc deinit
}
public class Result_PositiveTimestampCreationErrorZ {
  public init(pointer: LDKFramework.LDKCResult_PositiveTimestampCreationErrorZ)
  @objc deinit
}
public class Result_CVec_SignatureZNoneZ {
  public init(pointer: LDKFramework.LDKCResult_CVec_SignatureZNoneZ)
  @objc deinit
}
open class Filter {
  public var cOpaqueStruct: LDKFramework.LDKFilter?
  public init()
  public init(pointer: LDKFramework.LDKFilter)
  open func register_tx(txid: [Swift.UInt8]?, script_pubkey: [Swift.UInt8])
  open func register_output(output: LDKFramework.WatchedOutput) -> LDKFramework.Option_C2Tuple_usizeTransactionZZ
  open func free()
  @objc deinit
}
public class Result_ReplyShortChannelIdsEndDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ)
  @objc deinit
}
public class C2Tuple_BlockHashChannelMonitorZ {
  public init(pointer: LDKFramework.LDKC2Tuple_BlockHashChannelMonitorZ)
  public func new(a: [Swift.UInt8], b: LDKFramework.ChannelMonitor) -> LDKFramework.C2Tuple_BlockHashChannelMonitorZ
  @objc deinit
}
public class Result_RoutingFeesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_RoutingFeesDecodeErrorZ)
  @objc deinit
}
public class Result_QueryChannelRangeDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_QueryChannelRangeDecodeErrorZ)
  @objc deinit
}
public class NodeInfo {
  public init(channels_arg: [Swift.UInt64], lowest_inbound_channel_fees_arg: LDKFramework.RoutingFees, announcement_info_arg: LDKFramework.NodeAnnouncementInfo)
  public init(pointer: LDKFramework.LDKNodeInfo)
  public func set_channels(val: [Swift.UInt64])
  public func get_lowest_inbound_channel_fees() -> LDKFramework.RoutingFees
  public func set_lowest_inbound_channel_fees(val: LDKFramework.RoutingFees)
  public func get_announcement_info() -> LDKFramework.NodeAnnouncementInfo
  public func set_announcement_info(val: LDKFramework.NodeAnnouncementInfo)
  public func clone(orig: LDKFramework.NodeInfo) -> LDKFramework.NodeInfo
  public func write(obj: LDKFramework.NodeInfo) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_NodeInfoDecodeErrorZ
  @objc deinit
}
public class Result_AcceptChannelDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_AcceptChannelDecodeErrorZ)
  @objc deinit
}
open class EventsProvider {
  public var cOpaqueStruct: LDKFramework.LDKEventsProvider?
  public init()
  public init(pointer: LDKFramework.LDKEventsProvider)
  open func get_and_clear_pending_events() -> [LDKFramework.LDKEvent]
  open func free()
  @objc deinit
}
public class FundingLocked {
  public init(channel_id_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKFundingLocked)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_next_per_commitment_point() -> [Swift.UInt8]
  public func set_next_per_commitment_point(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.FundingLocked) -> LDKFramework.FundingLocked
  public func write(obj: LDKFramework.FundingLocked) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_FundingLockedDecodeErrorZ
  @objc deinit
}
public class TrustedCommitmentTransaction {
  public init(pointer: LDKFramework.LDKTrustedCommitmentTransaction)
  public func txid() -> [Swift.UInt8]
  public func built_transaction() -> LDKFramework.BuiltCommitmentTransaction
  public func keys() -> LDKFramework.TxCreationKeys
  public func get_htlc_sigs(htlc_base_key: [Swift.UInt8], channel_parameters: LDKFramework.DirectedChannelTransactionParameters) -> LDKFramework.Result_CVec_SignatureZNoneZ
  @objc deinit
}
public class Result_SecretKeyErrorZ {
  public init(pointer: LDKFramework.LDKCResult_SecretKeyErrorZ)
  @objc deinit
}
public class ChannelInfo {
  public init(features_arg: LDKFramework.ChannelFeatures, node_one_arg: [Swift.UInt8], one_to_two_arg: LDKFramework.DirectionalChannelInfo, node_two_arg: [Swift.UInt8], two_to_one_arg: LDKFramework.DirectionalChannelInfo, capacity_sats_arg: LDKFramework.Option_u64Z, announcement_message_arg: LDKFramework.ChannelAnnouncement)
  public init(pointer: LDKFramework.LDKChannelInfo)
  public func get_features() -> LDKFramework.ChannelFeatures
  public func set_features(val: LDKFramework.ChannelFeatures)
  public func get_node_one() -> [Swift.UInt8]
  public func set_node_one(val: [Swift.UInt8])
  public func get_one_to_two() -> LDKFramework.DirectionalChannelInfo
  public func set_one_to_two(val: LDKFramework.DirectionalChannelInfo)
  public func get_node_two() -> [Swift.UInt8]
  public func set_node_two(val: [Swift.UInt8])
  public func get_two_to_one() -> LDKFramework.DirectionalChannelInfo
  public func set_two_to_one(val: LDKFramework.DirectionalChannelInfo)
  public func get_capacity_sats() -> LDKFramework.Option_u64Z
  public func set_capacity_sats(val: LDKFramework.Option_u64Z)
  public func get_announcement_message() -> LDKFramework.ChannelAnnouncement
  public func set_announcement_message(val: LDKFramework.ChannelAnnouncement)
  public func clone(orig: LDKFramework.ChannelInfo) -> LDKFramework.ChannelInfo
  public func write(obj: LDKFramework.ChannelInfo) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_ChannelInfoDecodeErrorZ
  @objc deinit
}
public class HolderCommitmentTransaction {
  public init(commitment_tx: LDKFramework.CommitmentTransaction, counterparty_sig: [Swift.UInt8], counterparty_htlc_sigs: [[Swift.UInt8]], holder_funding_key: [Swift.UInt8], counterparty_funding_key: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKHolderCommitmentTransaction)
  public func get_counterparty_sig() -> [Swift.UInt8]
  public func set_counterparty_sig(val: [Swift.UInt8])
  public func set_counterparty_htlc_sigs(val: [[Swift.UInt8]])
  public func clone(orig: LDKFramework.HolderCommitmentTransaction) -> LDKFramework.HolderCommitmentTransaction
  public func write(obj: LDKFramework.HolderCommitmentTransaction) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_HolderCommitmentTransactionDecodeErrorZ
  @objc deinit
}
public class ChainParameters {
  public init(network_arg: LDKFramework.LDKNetwork, best_block_arg: LDKFramework.BestBlock)
  public init(pointer: LDKFramework.LDKChainParameters)
  public func get_network() -> LDKFramework.LDKNetwork
  public func set_network(val: LDKFramework.LDKNetwork)
  public func get_best_block() -> LDKFramework.BestBlock
  public func set_best_block(val: LDKFramework.BestBlock)
  @objc deinit
}
public class PaymentSendFailure {
  public init(pointer: LDKFramework.LDKPaymentSendFailure)
  @objc deinit
}
public class Event {
  public init(pointer: LDKFramework.LDKEvent)
  @objc deinit
}
public class UserConfig {
  public init()
  public init(pointer: LDKFramework.LDKUserConfig)
  public func get_own_channel_config() -> LDKFramework.ChannelHandshakeConfig
  public func set_own_channel_config(val: LDKFramework.ChannelHandshakeConfig)
  public func get_peer_channel_config_limits() -> LDKFramework.ChannelHandshakeLimits
  public func set_peer_channel_config_limits(val: LDKFramework.ChannelHandshakeLimits)
  public func get_channel_options() -> LDKFramework.ChannelConfig
  public func set_channel_options(val: LDKFramework.ChannelConfig)
  public func clone(orig: LDKFramework.UserConfig) -> LDKFramework.UserConfig
  @objc deinit
}
public class Invoice {
  public init(pointer: LDKFramework.LDKInvoice)
  public func clone(orig: LDKFramework.Invoice) -> LDKFramework.Invoice
  public func into_signed_raw() -> LDKFramework.SignedRawInvoice
  public func check_signature() -> LDKFramework.Result_NoneSemanticErrorZ
  public func from_signed(signed_invoice: LDKFramework.SignedRawInvoice) -> LDKFramework.Result_InvoiceSemanticErrorZ
  public func timestamp() -> Swift.UInt64
  public func payment_hash() -> [Swift.UInt8]
  public func payee_pub_key() -> [Swift.UInt8]
  public func payment_secret() -> [Swift.UInt8]
  public func features() -> LDKFramework.InvoiceFeatures
  public func recover_payee_pub_key() -> [Swift.UInt8]
  public func expiry_time() -> Swift.UInt64
  public func min_final_cltv_expiry() -> Swift.UInt64
  public func routes() -> [LDKFramework.LDKRouteHint]
  public func currency() -> LDKFramework.LDKCurrency
  public func amount_pico_btc() -> LDKFramework.Option_u64Z
  public func from_str(s: Swift.String) -> LDKFramework.Result_InvoiceNoneZ
  public func to_str(o: LDKFramework.Invoice) -> Swift.String
  @objc deinit
}
public class Result_SignedRawInvoiceNoneZ {
  public init(pointer: LDKFramework.LDKCResult_SignedRawInvoiceNoneZ)
  @objc deinit
}
public class Description {
  public init(pointer: LDKFramework.LDKDescription)
  public func clone(orig: LDKFramework.Description) -> LDKFramework.Description
  public func new(description: Swift.String) -> LDKFramework.Result_DescriptionCreationErrorZ
  public func into_inner() -> Swift.String
  @objc deinit
}
public class APIError {
  public init(pointer: LDKFramework.LDKAPIError)
  @objc deinit
}
public class Result_ChannelMonitorUpdateDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelMonitorUpdateDecodeErrorZ)
  @objc deinit
}
public class Result_OpenChannelDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_OpenChannelDecodeErrorZ)
  @objc deinit
}
public class Result_NoneMonitorUpdateErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NoneMonitorUpdateErrorZ)
  @objc deinit
}
public class InMemorySigner {
  public init(funding_key: [Swift.UInt8], revocation_base_key: [Swift.UInt8], payment_key: [Swift.UInt8], delayed_payment_base_key: [Swift.UInt8], htlc_base_key: [Swift.UInt8], commitment_seed: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, channel_keys_id: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKInMemorySigner)
  public func get_funding_key() -> [Swift.UInt8]
  public func set_funding_key(val: [Swift.UInt8])
  public func get_revocation_base_key() -> [Swift.UInt8]
  public func set_revocation_base_key(val: [Swift.UInt8])
  public func get_payment_key() -> [Swift.UInt8]
  public func set_payment_key(val: [Swift.UInt8])
  public func get_delayed_payment_base_key() -> [Swift.UInt8]
  public func set_delayed_payment_base_key(val: [Swift.UInt8])
  public func get_htlc_base_key() -> [Swift.UInt8]
  public func set_htlc_base_key(val: [Swift.UInt8])
  public func get_commitment_seed() -> [Swift.UInt8]
  public func set_commitment_seed(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.InMemorySigner) -> LDKFramework.InMemorySigner
  public func counterparty_pubkeys() -> LDKFramework.ChannelPublicKeys
  public func counterparty_selected_contest_delay() -> Swift.UInt16
  public func holder_selected_contest_delay() -> Swift.UInt16
  public func is_outbound() -> Swift.Bool
  public func funding_outpoint() -> LDKFramework.OutPoint
  public func get_channel_parameters() -> LDKFramework.ChannelTransactionParameters
  public func sign_counterparty_payment_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LDKFramework.StaticPaymentOutputDescriptor) -> LDKFramework.Result_CVec_CVec_u8ZZNoneZ
  public func sign_dynamic_p2wsh_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LDKFramework.DelayedPaymentOutputDescriptor) -> LDKFramework.Result_CVec_CVec_u8ZZNoneZ
  public func as_BaseSign() -> LDKFramework.BaseSign
  public func as_Sign() -> LDKFramework.Sign
  public func write(obj: LDKFramework.InMemorySigner) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_InMemorySignerDecodeErrorZ
  @objc deinit
}
public class IgnoringMessageHandler {
  public init()
  public init(pointer: LDKFramework.LDKIgnoringMessageHandler)
  public func as_MessageSendEventsProvider() -> LDKFramework.MessageSendEventsProvider
  public func as_RoutingMessageHandler() -> LDKFramework.RoutingMessageHandler
  @objc deinit
}
public class UpdateFee {
  public init(channel_id_arg: [Swift.UInt8], feerate_per_kw_arg: Swift.UInt32)
  public init(pointer: LDKFramework.LDKUpdateFee)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_feerate_per_kw() -> Swift.UInt32
  public func set_feerate_per_kw(val: Swift.UInt32)
  public func clone(orig: LDKFramework.UpdateFee) -> LDKFramework.UpdateFee
  public func write(obj: LDKFramework.UpdateFee) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UpdateFeeDecodeErrorZ
  @objc deinit
}
public class DirectedChannelTransactionParameters {
  public init(pointer: LDKFramework.LDKDirectedChannelTransactionParameters)
  public func broadcaster_pubkeys() -> LDKFramework.ChannelPublicKeys
  public func countersignatory_pubkeys() -> LDKFramework.ChannelPublicKeys
  public func contest_delay() -> Swift.UInt16
  public func is_outbound() -> Swift.Bool
  public func funding_outpoint() -> LDKFramework.OutPoint
  @objc deinit
}
public class Result_NetworkGraphDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NetworkGraphDecodeErrorZ)
  @objc deinit
}
public class MinFinalCltvExpiry {
  public init(pointer: LDKFramework.LDKMinFinalCltvExpiry)
  public func clone(orig: LDKFramework.MinFinalCltvExpiry) -> LDKFramework.MinFinalCltvExpiry
  @objc deinit
}
public class Result_UnsignedNodeAnnouncementDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UtilMethods {
  public class func constructor_BlockHashChannelMonitorZ_read(ser: [Swift.UInt8], arg: LDKFramework.KeysInterface) -> LDKFramework.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  public class func constructor_BlockHashChannelManagerZ_read(ser: [Swift.UInt8], arg_keys_manager: LDKFramework.KeysInterface, arg_fee_estimator: LDKFramework.FeeEstimator, arg_chain_monitor: LDKFramework.Watch, arg_tx_broadcaster: LDKFramework.BroadcasterInterface, arg_logger: LDKFramework.Logger, arg_default_config: LDKFramework.UserConfig, arg_channel_monitors: [LDKFramework.LDKChannelMonitor]) -> LDKFramework.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  @objc deinit
}
public class PeerHandleError {
  public init(no_connection_possible_arg: Swift.Bool)
  public init(pointer: LDKFramework.LDKPeerHandleError)
  public func get_no_connection_possible() -> Swift.Bool
  public func set_no_connection_possible(val: Swift.Bool)
  public func clone(orig: LDKFramework.PeerHandleError) -> LDKFramework.PeerHandleError
  @objc deinit
}
open class ChannelMessageHandler {
  public var cOpaqueStruct: LDKFramework.LDKChannelMessageHandler?
  public init()
  public init(pointer: LDKFramework.LDKChannelMessageHandler)
  open func handle_open_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework.InitFeatures, msg: LDKFramework.OpenChannel)
  open func handle_accept_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework.InitFeatures, msg: LDKFramework.AcceptChannel)
  open func handle_funding_created(their_node_id: [Swift.UInt8], msg: LDKFramework.FundingCreated)
  open func handle_funding_signed(their_node_id: [Swift.UInt8], msg: LDKFramework.FundingSigned)
  open func handle_funding_locked(their_node_id: [Swift.UInt8], msg: LDKFramework.FundingLocked)
  open func handle_shutdown(their_node_id: [Swift.UInt8], their_features: LDKFramework.InitFeatures, msg: LDKFramework.Shutdown)
  open func handle_closing_signed(their_node_id: [Swift.UInt8], msg: LDKFramework.ClosingSigned)
  open func handle_update_add_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework.UpdateAddHTLC)
  open func handle_update_fulfill_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework.UpdateFulfillHTLC)
  open func handle_update_fail_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework.UpdateFailHTLC)
  open func handle_update_fail_malformed_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework.UpdateFailMalformedHTLC)
  open func handle_commitment_signed(their_node_id: [Swift.UInt8], msg: LDKFramework.CommitmentSigned)
  open func handle_revoke_and_ack(their_node_id: [Swift.UInt8], msg: LDKFramework.RevokeAndACK)
  open func handle_update_fee(their_node_id: [Swift.UInt8], msg: LDKFramework.UpdateFee)
  open func handle_announcement_signatures(their_node_id: [Swift.UInt8], msg: LDKFramework.AnnouncementSignatures)
  open func peer_disconnected(their_node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  open func peer_connected(their_node_id: [Swift.UInt8], msg: LDKFramework.Init)
  open func handle_channel_reestablish(their_node_id: [Swift.UInt8], msg: LDKFramework.ChannelReestablish)
  open func handle_channel_update(their_node_id: [Swift.UInt8], msg: LDKFramework.ChannelUpdate)
  open func handle_error(their_node_id: [Swift.UInt8], msg: LDKFramework.ErrorMessage)
  open func free()
  @objc deinit
}
public class RouteHop {
  public init(pubkey_arg: [Swift.UInt8], node_features_arg: LDKFramework.NodeFeatures, short_channel_id_arg: Swift.UInt64, channel_features_arg: LDKFramework.ChannelFeatures, fee_msat_arg: Swift.UInt64, cltv_expiry_delta_arg: Swift.UInt32)
  public init(pointer: LDKFramework.LDKRouteHop)
  public func get_pubkey() -> [Swift.UInt8]
  public func set_pubkey(val: [Swift.UInt8])
  public func get_node_features() -> LDKFramework.NodeFeatures
  public func set_node_features(val: LDKFramework.NodeFeatures)
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_channel_features() -> LDKFramework.ChannelFeatures
  public func set_channel_features(val: LDKFramework.ChannelFeatures)
  public func get_fee_msat() -> Swift.UInt64
  public func set_fee_msat(val: Swift.UInt64)
  public func get_cltv_expiry_delta() -> Swift.UInt32
  public func set_cltv_expiry_delta(val: Swift.UInt32)
  public func clone(orig: LDKFramework.RouteHop) -> LDKFramework.RouteHop
  @objc deinit
}
public class Result_ChannelTransactionParametersDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelTransactionParametersDecodeErrorZ)
  @objc deinit
}
public class UpdateAddHTLC {
  public init(pointer: LDKFramework.LDKUpdateAddHTLC)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_amount_msat() -> Swift.UInt64
  public func set_amount_msat(val: Swift.UInt64)
  public func get_payment_hash() -> [Swift.UInt8]
  public func set_payment_hash(val: [Swift.UInt8])
  public func get_cltv_expiry() -> Swift.UInt32
  public func set_cltv_expiry(val: Swift.UInt32)
  public func clone(orig: LDKFramework.UpdateAddHTLC) -> LDKFramework.UpdateAddHTLC
  public func write(obj: LDKFramework.UpdateAddHTLC) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_UpdateAddHTLCDecodeErrorZ
  @objc deinit
}
public class Result_SpendableOutputDescriptorDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_SpendableOutputDescriptorDecodeErrorZ)
  @objc deinit
}
public class DecodeError {
  public init(pointer: LDKFramework.LDKDecodeError)
  public func clone(orig: LDKFramework.DecodeError) -> LDKFramework.DecodeError
  @objc deinit
}
public class Result_ChannelFeaturesDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_ChannelFeaturesDecodeErrorZ)
  @objc deinit
}
public class RevokeAndACK {
  public init(channel_id_arg: [Swift.UInt8], per_commitment_secret_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKRevokeAndACK)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_per_commitment_secret() -> [Swift.UInt8]
  public func set_per_commitment_secret(val: [Swift.UInt8])
  public func get_next_per_commitment_point() -> [Swift.UInt8]
  public func set_next_per_commitment_point(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.RevokeAndACK) -> LDKFramework.RevokeAndACK
  public func write(obj: LDKFramework.RevokeAndACK) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_RevokeAndACKDecodeErrorZ
  @objc deinit
}
public class Result_NoneLightningErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NoneLightningErrorZ)
  @objc deinit
}
public class DelayedPaymentOutputDescriptor {
  public init(outpoint_arg: LDKFramework.OutPoint, per_commitment_point_arg: [Swift.UInt8], to_self_delay_arg: Swift.UInt16, output_arg: LDKFramework.LDKTxOut, revocation_pubkey_arg: [Swift.UInt8], channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
  public init(pointer: LDKFramework.LDKDelayedPaymentOutputDescriptor)
  public func get_outpoint() -> LDKFramework.OutPoint
  public func set_outpoint(val: LDKFramework.OutPoint)
  public func get_per_commitment_point() -> [Swift.UInt8]
  public func set_per_commitment_point(val: [Swift.UInt8])
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func set_output(val: LDKFramework.LDKTxOut)
  public func get_revocation_pubkey() -> [Swift.UInt8]
  public func set_revocation_pubkey(val: [Swift.UInt8])
  public func get_channel_keys_id() -> [Swift.UInt8]
  public func set_channel_keys_id(val: [Swift.UInt8])
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func clone(orig: LDKFramework.DelayedPaymentOutputDescriptor) -> LDKFramework.DelayedPaymentOutputDescriptor
  @objc deinit
}
public class MessageSendEvent {
  public init(pointer: LDKFramework.LDKMessageSendEvent)
  @objc deinit
}
public class Result_NodeAnnouncementDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_NodeAnnouncementDecodeErrorZ)
  @objc deinit
}
public class TxCreationKeys {
  public init(per_commitment_point_arg: [Swift.UInt8], revocation_key_arg: [Swift.UInt8], broadcaster_htlc_key_arg: [Swift.UInt8], countersignatory_htlc_key_arg: [Swift.UInt8], broadcaster_delayed_payment_key_arg: [Swift.UInt8])
  public init(pointer: LDKFramework.LDKTxCreationKeys)
  public func get_per_commitment_point() -> [Swift.UInt8]
  public func set_per_commitment_point(val: [Swift.UInt8])
  public func get_revocation_key() -> [Swift.UInt8]
  public func set_revocation_key(val: [Swift.UInt8])
  public func get_broadcaster_htlc_key() -> [Swift.UInt8]
  public func set_broadcaster_htlc_key(val: [Swift.UInt8])
  public func get_countersignatory_htlc_key() -> [Swift.UInt8]
  public func set_countersignatory_htlc_key(val: [Swift.UInt8])
  public func get_broadcaster_delayed_payment_key() -> [Swift.UInt8]
  public func set_broadcaster_delayed_payment_key(val: [Swift.UInt8])
  public func clone(orig: LDKFramework.TxCreationKeys) -> LDKFramework.TxCreationKeys
  public func write(obj: LDKFramework.TxCreationKeys) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_TxCreationKeysDecodeErrorZ
  public func derive_new(per_commitment_point: [Swift.UInt8], broadcaster_delayed_payment_base: [Swift.UInt8], broadcaster_htlc_base: [Swift.UInt8], countersignatory_revocation_base: [Swift.UInt8], countersignatory_htlc_base: [Swift.UInt8]) -> LDKFramework.Result_TxCreationKeysErrorZ
  public func from_channel_static_keys(per_commitment_point: [Swift.UInt8], broadcaster_keys: LDKFramework.ChannelPublicKeys, countersignatory_keys: LDKFramework.ChannelPublicKeys) -> LDKFramework.Result_TxCreationKeysErrorZ
  @objc deinit
}
public class FilesystemPersister {
  public init(path_to_channel_data: Swift.String)
  public init(pointer: LDKFramework.LDKFilesystemPersister)
  public func get_data_dir() -> Swift.String
  public func persist_manager(data_dir: Swift.String, manager: LDKFramework.ChannelManager) -> LDKFramework.Result_NoneErrorZ
  public func read_channelmonitors(keys_manager: LDKFramework.KeysInterface) -> LDKFramework.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
  public func as_Persist() -> LDKFramework.Persist
  @objc deinit
}
public class Result_DirectionalChannelInfoDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_DirectionalChannelInfoDecodeErrorZ)
  @objc deinit
}
public class Result_RecoverableSignatureNoneZ {
  public init(pointer: LDKFramework.LDKCResult_RecoverableSignatureNoneZ)
  @objc deinit
}
public class Result_GossipTimestampFilterDecodeErrorZ {
  public init(pointer: LDKFramework.LDKCResult_GossipTimestampFilterDecodeErrorZ)
  @objc deinit
}
public class RouteHintHop {
  public init(src_node_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, fees_arg: LDKFramework.RoutingFees, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: LDKFramework.Option_u64Z, htlc_maximum_msat_arg: LDKFramework.Option_u64Z)
  public init(pointer: LDKFramework.LDKRouteHintHop)
  public func get_src_node_id() -> [Swift.UInt8]
  public func set_src_node_id(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_fees() -> LDKFramework.RoutingFees
  public func set_fees(val: LDKFramework.RoutingFees)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> LDKFramework.Option_u64Z
  public func set_htlc_minimum_msat(val: LDKFramework.Option_u64Z)
  public func get_htlc_maximum_msat() -> LDKFramework.Option_u64Z
  public func set_htlc_maximum_msat(val: LDKFramework.Option_u64Z)
  public func clone(orig: LDKFramework.RouteHintHop) -> LDKFramework.RouteHintHop
  @objc deinit
}
open class MessageSendEventsProvider {
  public var cOpaqueStruct: LDKFramework.LDKMessageSendEventsProvider?
  public init()
  public init(pointer: LDKFramework.LDKMessageSendEventsProvider)
  open func get_and_clear_pending_msg_events() -> [LDKFramework.LDKMessageSendEvent]
  open func free()
  @objc deinit
}
public class NodeAnnouncementInfo {
  public init(features_arg: LDKFramework.NodeFeatures, last_update_arg: Swift.UInt32, rgb_arg: [Swift.UInt8], alias_arg: [Swift.UInt8], addresses_arg: [LDKFramework.LDKNetAddress], announcement_message_arg: LDKFramework.NodeAnnouncement)
  public init(pointer: LDKFramework.LDKNodeAnnouncementInfo)
  public func get_features() -> LDKFramework.NodeFeatures
  public func set_features(val: LDKFramework.NodeFeatures)
  public func get_last_update() -> Swift.UInt32
  public func set_last_update(val: Swift.UInt32)
  public func get_rgb() -> [Swift.UInt8]
  public func set_rgb(val: [Swift.UInt8])
  public func get_alias() -> [Swift.UInt8]
  public func set_alias(val: [Swift.UInt8])
  public func set_addresses(val: [LDKFramework.LDKNetAddress])
  public func get_announcement_message() -> LDKFramework.NodeAnnouncement
  public func set_announcement_message(val: LDKFramework.NodeAnnouncement)
  public func clone(orig: LDKFramework.NodeAnnouncementInfo) -> LDKFramework.NodeAnnouncementInfo
  public func write(obj: LDKFramework.NodeAnnouncementInfo) -> [Swift.UInt8]
  public func read(ser: [Swift.UInt8]) -> LDKFramework.Result_NodeAnnouncementInfoDecodeErrorZ
  @objc deinit
}
